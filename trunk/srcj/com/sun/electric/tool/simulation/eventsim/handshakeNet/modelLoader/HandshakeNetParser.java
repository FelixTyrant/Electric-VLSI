/* Generated By:JavaCC: Do not edit this line. HandshakeNetParser.java */
package com.sun.electric.tool.simulation.eventsim.handshakeNet.modelLoader;

import java.lang.reflect.Constructor;
import java.util.Set;

// import com.sunlabs.handshakeNet.modelBuilder.ModelDescription;
import com.sun.electric.tool.simulation.eventsim.core.common.Parameters;
import com.sun.electric.tool.simulation.eventsim.core.engine.Director;
import com.sun.electric.tool.simulation.eventsim.core.globals.Globals;
import com.sun.electric.tool.simulation.eventsim.core.hierarchy.CompositeEntity;
import com.sun.electric.tool.simulation.eventsim.handshakeNet.channel.Channel;
import com.sun.electric.tool.simulation.eventsim.handshakeNet.channel.RendezvousChannel;
import com.sun.electric.tool.simulation.eventsim.core.classRegistry.ClassRegistry;
import com.sun.electric.tool.simulation.eventsim.handshakeNet.component.Component;
import com.sun.electric.tool.simulation.eventsim.handshakeNet.terminal.InputTerminal;
import com.sun.electric.tool.simulation.eventsim.handshakeNet.terminal.OutputTerminal;
import com.sun.electric.tool.simulation.eventsim.handshakeNet.modelBuilder.ComponentRecord;
import com.sun.electric.tool.simulation.eventsim.handshakeNet.modelBuilder.ChannelRecord;
import com.sun.electric.tool.simulation.eventsim.handshakeNet.modelBuilder.ConnectionPoint;

public class HandshakeNetParser implements HandshakeNetParserConstants {

        private ClassRegistry classRegistry= ClassRegistry.getInstance();
        private ModelDescription modDes= ModelDescription.getInstance();

        public static void main(String args[])
        throws ParseException, TokenMgrError {
                HandshakeNetParser parser= new HandshakeNetParser(System.in);
                parser.start();
        }

  final public void start() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODEL:
      jj_consume_token(MODEL);
      t = jj_consume_token(NAME);
                        // model name. Do we reall need that?
                        modDes.name= t.image;
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
      jj_consume_token(26);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      component();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMPONENT:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONNECTION:
      case CHANNEL:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      channel();
    }
  }

  final public void component() throws ParseException {
        Token t;
        ComponentRecord cmpRecord;
        Parameters parameters= new Parameters();
    jj_consume_token(COMPONENT);
    t = jj_consume_token(NAME);
                // start a new component record
                cmpRecord= new ComponentRecord();
                // remember the line where the record was defined
                cmpRecord.line= jj_input_stream.getBeginLine();
                // store component name
                cmpRecord.name= t.image;
    jj_consume_token(INSTANCEOF);
    t = jj_consume_token(NAME);
                // does this class exist in the registry?
                String className= t.image;
                Class c= classRegistry.getComponentType(className);
                if (c != null) {
                        // class found, record it
                        cmpRecord.type= c;
                        cmpRecord.typeName= className;
                }
                else {
                        // class not found, error
                        {if (true) throw new ParseException("Error in line "
                                        + jj_input_stream.getBeginLine()
                                        + ": Class tag \"" + className
                                        + "\" not recognized");}
                }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_BRACE:
      jj_consume_token(LEFT_BRACE);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PARAMETER:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        componentParameter(cmpRecord, parameters);
      }
      jj_consume_token(RIGHT_BRACE);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
      jj_consume_token(26);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
                // record the parameters
                cmpRecord.attributes= parameters;
                // add component to the model
                modDes.componentNameMap.put(cmpRecord.name, cmpRecord);
  }

  final public void componentParameter(ComponentRecord cmpRecord, Parameters parameters) throws ParseException {
        Token t;
        String parameterName=null;
        String parameterValue=null;
    jj_consume_token(PARAMETER);
    t = jj_consume_token(NAME);
                parameterName= t.image;
    jj_consume_token(27);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      t = jj_consume_token(NAME);
                        parameterValue= t.image;
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                        parameterValue= t.image.substring(1, t.image.length()-1);
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
                        parameterValue= t.image;
                        parameters.add(parameterName, parameterValue);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
      jj_consume_token(26);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  final public void channel() throws ParseException {
        Token t;
        ChannelRecord channelRecord;
        Parameters channelParameters;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONNECTION:
      jj_consume_token(CONNECTION);
      break;
    case CHANNEL:
      jj_consume_token(CHANNEL);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(NAME);
                // start a new channel record
                channelRecord= new ChannelRecord();
                channelParameters= new Parameters();
                // record the name
                channelRecord.name= t.image;
                // record the line where the channel is defined
                channelRecord.line= jj_input_stream.getBeginLine();
    jj_consume_token(LEFT_BRACE);
    label_4:
    while (true) {
      from(channelRecord);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FROM:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
    }
    label_5:
    while (true) {
      to(channelRecord);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TO:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARAMETER:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      channelParameter(channelRecord, channelParameters);
    }
    jj_consume_token(RIGHT_BRACE);
                // record the parameters
                channelRecord.attributes= channelParameters;
                // add the connection to the model
                modDes.connectionRecordList.add(channelRecord);
  }

  final public void from(ChannelRecord channelRecord) throws ParseException {
        Token t;
        ConnectionPoint connectionPoint;
    jj_consume_token(FROM);
    t = jj_consume_token(NAME);
                // start a new connection point
                connectionPoint= new ConnectionPoint();
                // record the line
                connectionPoint.line= jj_input_stream.getBeginLine();
                // record the component name
                connectionPoint.componentName= t.image;
                if (!modDes.componentNameMap.containsKey(connectionPoint.componentName)) {
                        {if (true) throw new ParseException("Error in line "
                                + connectionPoint.line
                        + ": component "
                        + connectionPoint.componentName
                        + " was not defined, therefore"
                        + " the connection has an unkown end.");}
                }
    jj_consume_token(28);
    t = jj_consume_token(NAME);
                // record terminal name
                connectionPoint.terminalName= t.image;

                // want to check whether this terminal exists?????

                // add connection point to the set of connection point
                boolean check= channelRecord.sources.add(connectionPoint);
                if (!check) {
                        // connection specified twice    				
                        {if (true) throw new ParseException("Error in line "
                                        + connectionPoint.line
                                        + ": The end point of the connection"
                                + " was specified twice.");}
                }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
      jj_consume_token(26);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  final public void to(ChannelRecord channelRecord) throws ParseException {
        Token t;
        ConnectionPoint connectionPoint;
    jj_consume_token(TO);
    t = jj_consume_token(NAME);
                // start a new connection point
                connectionPoint= new ConnectionPoint();
                // record the line
                connectionPoint.line= jj_input_stream.getBeginLine();
                // record the component name
                connectionPoint.componentName= t.image;
                if (!modDes.componentNameMap.containsKey(connectionPoint.componentName)) {
                        {if (true) throw new ParseException("Error in line "
                                + connectionPoint.line
                        + ": component "
                        + connectionPoint.componentName
                        + " was not defined, therefore"
                        + " the connection has an unkown end.");}
                }
    jj_consume_token(28);
    t = jj_consume_token(NAME);
                // record terminal name
                connectionPoint.terminalName= t.image;
                // add connection point to the set of connection point
                boolean check= channelRecord.destinations.add(connectionPoint);
                if (!check) {
                        // connection specified twice    				
                        {if (true) throw new ParseException("Error in line "
                                        + connectionPoint.line
                                        + ": The end point of the connection"
                                + " was specified twice.");}
                }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
      jj_consume_token(26);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  final public void channelParameter(ChannelRecord channelRecord, Parameters channelParameters) throws ParseException {
        Token t;
        String parameterName;
        String parameterValue;
    jj_consume_token(PARAMETER);
    t = jj_consume_token(NAME);
                parameterName= t.image;
    jj_consume_token(27);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      t = jj_consume_token(NAME);
                        parameterValue= t.image;
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                        parameterValue= t.image.substring(1, t.image.length()-1);
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
                        parameterValue= t.image;
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                channelParameters.add(parameterName, t.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
      jj_consume_token(26);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  public HandshakeNetParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x20,0x4000000,0x40,0x180,0x400,0x400000,0x4000000,0x2300000,0x4000000,0x180,0x800,0x1000,0x400,0x4000000,0x4000000,0x2300000,0x4000000,};
   }

  public HandshakeNetParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public HandshakeNetParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HandshakeNetParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public HandshakeNetParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HandshakeNetParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public HandshakeNetParser(HandshakeNetParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public void ReInit(HandshakeNetParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[29];
    for (int i = 0; i < 29; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 29; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
