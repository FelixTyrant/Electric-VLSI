/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.5";
  STATIC= false;
}

PARSER_BEGIN(ClassLibraryParser)

package com.sun.electric.tool.simulation.eventsim.core.classRegistryLoader;

import com.sun.electric.tool.simulation.eventsim.core.classRegistry.ClassRegistry;
import com.sun.electric.tool.simulation.eventsim.core.classRegistry.ComponentInfo;
import com.sun.electric.tool.simulation.eventsim.handshakeNet.component.Component;

public class ClassLibraryParser {

	private ClassRegistry classRegistry= ClassRegistry.getInstance();
	private ComponentInfo componentInfo;
	private int componentStartLine=0;
	
  	public static void main(String args[]) 
  	throws ParseException, TokenMgrError {
    	ClassLibraryParser parser= new ClassLibraryParser(System.in);
    	parser.start();    
  	} 
} 

PARSER_END(ClassLibraryParser)

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
}

TOKEN : /* keywords */
{
	<COMPONENT: "component" >
|	<CLASS: "class" >
|	<INPUT: "input" >
|	<OUTPUT: "output" >
|	<PARAMETER: "parameter" > 
|	<INT: "int" >
|	<STRING: "String">
}

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
}

MORE: { "/*" : IN_COMMENT }
<IN_COMMENT>MORE: { < ~[] > }
<IN_COMMENT>SKIP: { "*/": DEFAULT }

TOKEN :

{
	< #SYMBOL : ["a"-"z"] | ["A"-"Z"] | "-" | "_" | "." | ":" | "\\" | "/" >
|   < #DIGIT: ["0" - "9"] >
}

TOKEN : 
{	
	< NUMBER: ("-")?(<DIGIT>)+ >
|	< NAME: (<SYMBOL> | <DIGIT>)* (<SYMBOL>)+ (<SYMBOL> | <DIGIT>)* >
|	< LEFT_BRACE: "{" >
|	< RIGHT_BRACE: "}" >
|	< LEFT_BRACKET: "[" >
|	< RIGHT_BRACKET: "]" >
|   < ARROW: ("->" | "=>") >
|  	< STRING_LITERAL:       
	  "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\"" >
}


void start() :
{
	Token t;
}
{
	( component() )*
}

void component() :
{
	Token t;
}
{
	<COMPONENT>
	t= <NAME>
	{
		// remember the line
		int componentStartLine= jj_input_stream.getBeginLine();
		// start a new component info record
		componentInfo= new ComponentInfo();
		componentInfo.setName(t.image);
	}
	<LEFT_BRACE>
	<CLASS> 
	t= <NAME>
	{
		String className= t.image;
		componentInfo.className= className;
		try {
			// System.err.println(className);
			// characterData= "";
			componentInfo.setClass(Class.forName(className));
			if (!(Component.class.isAssignableFrom(componentInfo.getComponentType()))) {
				int line= jj_input_stream.getBeginLine();
				// wrong type
				throw new ParseException("Error in line " 
					+ line
					+ ": Class " 
					+ componentInfo.getComponentType().getName() 
					+ " is not an instance of " 
					+ Component.class.getName());
			}		
		}
		catch (ClassNotFoundException e) {
			int line= jj_input_stream.getBeginLine();
			throw new ParseException("Error in line " 
					+ line
					+ ": Class name \"" + t.image 
					+ "\" not recognized");
		}

	}
	[ ";" ]
	( input() | output() )*
	( parameter() )*
	<RIGHT_BRACE>
	{
		// System.out.println(componentInfo);
		boolean fresh= classRegistry.register(componentInfo.getName(), componentInfo);
    	if (!fresh) {
    		// check whether the tag has been used twice
    		Class c = classRegistry.getComponentType(componentInfo.getName());
    		if (c != componentInfo.getComponentType()) { 
    			throw new ParseException("Error in line "
    				+ componentStartLine
    				+ ": Tag " + componentInfo.getName()
    				+ " has been used both for class " 
					+ c.getName() + " and class "
					+ componentInfo.getComponentType().getName());
    			}
    		} // if !fresh
	}
}

void input() :
{
	Token t;
	String input;
}
{
	<INPUT>
	t= <NAME>
	{
		input= t.image;
		componentInfo.addInput(input);
	}
	[
		<LEFT_BRACKET>
		( 
			t= <NAME>
			{
				componentInfo.addVirtualInput(input, t.image);
			}
			[ "," ]
		)*
		<RIGHT_BRACKET>
	]
	[ ";" ]
}
	
void output() :
{
	Token t;
	String output;
}
{
	<OUTPUT>
	t= <NAME>
	{
		output= t.image;
		componentInfo.addOutput(output);
	}

	[
		<LEFT_BRACKET>
		( 
			t= <NAME>
			{
				componentInfo.addVirtualOutput(output, t.image);
			}
			[ "," ]
		)*
		<RIGHT_BRACKET>
	]

	[ ";" ]
}


void parameter() : 
{
	Token t;
	String type;
}
{
	<PARAMETER>
	( 
		<INT>
		{ 
			type= "int";
		}
		|
		<STRING>
		{
			type= "String";
		}
	)
	t= <NAME>
	{
		componentInfo.addParameter(t.image, type);
	}
	[ ";" ]
}