/* Generated By:JavaCC: Do not edit this line. ClassLibraryParser.java */
package com.sun.electric.tool.simulation.eventsim.core.classRegistryLoader;

import com.sun.electric.tool.simulation.eventsim.core.classRegistry.ClassRegistry;
import com.sun.electric.tool.simulation.eventsim.core.classRegistry.ComponentInfo;
import com.sun.electric.tool.simulation.eventsim.handshakeNet.component.Component;

public class ClassLibraryParser implements ClassLibraryParserConstants {

        private ClassRegistry classRegistry= ClassRegistry.getInstance();
        private ComponentInfo componentInfo;
        private int componentStartLine=0;

        public static void main(String args[])
        throws ParseException, TokenMgrError {
        ClassLibraryParser parser= new ClassLibraryParser(System.in);
        parser.start();
        }

  final public void start() throws ParseException {
        Token t;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMPONENT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      component();
    }
  }

  final public void component() throws ParseException {
        Token t;
    jj_consume_token(COMPONENT);
    t = jj_consume_token(NAME);
                // remember the line
                int componentStartLine= jj_input_stream.getBeginLine();
                // start a new component info record
                componentInfo= new ComponentInfo();
                componentInfo.setName(t.image);
    jj_consume_token(LEFT_BRACE);
    jj_consume_token(CLASS);
    t = jj_consume_token(NAME);
                String className= t.image;
                componentInfo.className= className;
                try {
                        // System.err.println(className);
                        // characterData= "";
                        componentInfo.setClass(Class.forName(className));
                        if (!(Component.class.isAssignableFrom(componentInfo.getComponentType()))) {
                                int line= jj_input_stream.getBeginLine();
                                // wrong type
                                {if (true) throw new ParseException("Error in line "
                                        + line
                                        + ": Class "
                                        + componentInfo.getComponentType().getName()
                                        + " is not an instance of "
                                        + Component.class.getName());}
                        }
                }
                catch (ClassNotFoundException e) {
                        int line= jj_input_stream.getBeginLine();
                        {if (true) throw new ParseException("Error in line "
                                        + line
                                        + ": Class name \"" + t.image
                                        + "\" not recognized");}
                }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
      jj_consume_token(26);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INPUT:
      case OUTPUT:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INPUT:
        input();
        break;
      case OUTPUT:
        output();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARAMETER:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      parameter();
    }
    jj_consume_token(RIGHT_BRACE);
                // System.out.println(componentInfo);
                boolean fresh= classRegistry.register(componentInfo.getName(), componentInfo);
        if (!fresh) {
                // check whether the tag has been used twice
                Class c = classRegistry.getComponentType(componentInfo.getName());
                if (c != componentInfo.getComponentType()) {
                        {if (true) throw new ParseException("Error in line "
                                + componentStartLine
                                + ": Tag " + componentInfo.getName()
                                + " has been used both for class "
                                        + c.getName() + " and class "
                                        + componentInfo.getComponentType().getName());}
                        }
                } // if !fresh

  }

  final public void input() throws ParseException {
        Token t;
        String input;
    jj_consume_token(INPUT);
    t = jj_consume_token(NAME);
                input= t.image;
                componentInfo.addInput(input);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_BRACKET:
      jj_consume_token(LEFT_BRACKET);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        t = jj_consume_token(NAME);
                                componentInfo.addVirtualInput(input, t.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 27:
          jj_consume_token(27);
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
      }
      jj_consume_token(RIGHT_BRACKET);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
      jj_consume_token(26);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  final public void output() throws ParseException {
        Token t;
        String output;
    jj_consume_token(OUTPUT);
    t = jj_consume_token(NAME);
                output= t.image;
                componentInfo.addOutput(output);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_BRACKET:
      jj_consume_token(LEFT_BRACKET);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_5;
        }
        t = jj_consume_token(NAME);
                                componentInfo.addVirtualOutput(output, t.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 27:
          jj_consume_token(27);
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
      }
      jj_consume_token(RIGHT_BRACKET);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
      jj_consume_token(26);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  final public void parameter() throws ParseException {
        Token t;
        String type;
    jj_consume_token(PARAMETER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
                        type= "int";
      break;
    case STRING:
      jj_consume_token(STRING);
                        type= "String";
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(NAME);
                componentInfo.addParameter(t.image, type);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
      jj_consume_token(26);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  public ClassLibraryParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x20,0x4000000,0x180,0x180,0x200,0x80000,0x8000000,0x400000,0x4000000,0x80000,0x8000000,0x400000,0x4000000,0xc00,0x4000000,};
   }

  public ClassLibraryParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public ClassLibraryParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ClassLibraryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  public ClassLibraryParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ClassLibraryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  public ClassLibraryParser(ClassLibraryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  public void ReInit(ClassLibraryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[28];
    for (int i = 0; i < 28; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 15; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 28; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
