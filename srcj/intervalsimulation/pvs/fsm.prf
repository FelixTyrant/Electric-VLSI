(fsm_def
 (nextstate_reject 0
  (nextstate_reject-1 nil 3302272677 3302341177 ("" (grind) nil nil)
   proved ((nextstate const-decl "state_opt" fsm_def nil)) 18 10 t
   shostak))
 (nextstate_other 0
  (nextstate_other-1 nil 3302188859 3302341177 ("" (grind) nil nil)
   proved
   ((/= const-decl "boolean" notequal nil)
    (nextstate const-decl "state_opt" fsm_def nil))
   92 70 t shostak))
 (goto_TCC1 0
  (goto_TCC1-1 nil 3301665283 3302341178 ("" (subtype-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (event formal-nonempty-type-decl nil fsm_def nil)
    (trace type-eq-decl nil fsm_def nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil))
   238 180 t shostak))
 (goto_TCC2 0
  (goto_TCC2-1 nil 3301665283 3302341178
   ("" (subtype-tcc) (("" (postpone) nil nil)) nil) proved nil 26 20
   nil shostak))
 (goto_TCC3 0
  (goto_TCC3-1 nil 3302272642 3302341178 ("" (subtype-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (event formal-nonempty-type-decl nil fsm_def nil)
    (trace type-eq-decl nil fsm_def nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil))
   191 170 nil shostak))
 (goto_next_TCC1 0
  (goto_next_TCC1-1 nil 3302272643 3302341178
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   428 400 nil shostak))
 (goto_next_TCC2 0
  (goto_next_TCC2-1 nil 3302272643 3302341178
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   92 90 nil shostak))
 (goto_next 0
  (goto_next-1 nil 3302272713 3302341179
   ("" (skosimp*)
    (("" (expand "goto" + 1) (("" (propax) nil nil)) nil)) nil)
   proved ((goto def-decl "state_opt" fsm_def nil)) 41 30 t shostak))
 (goto_next_reject 0
  (goto_next_reject-1 nil 3302272757 3302341179
   ("" (skosimp*)
    (("" (rewrite "goto_next")
      (("" (replace -2) (("" (rewrite "nextstate_reject") nil nil))
        nil))
      nil))
    nil)
   proved
   ((goto_next formula-decl nil fsm_def nil)
    (event formal-nonempty-type-decl nil fsm_def nil)
    (pred type-eq-decl nil defined_types nil)
    (state type-eq-decl nil fsm_def nil)
    (state_opt formal-nonempty-type-decl nil fsm_def nil)
    (fsm type-eq-decl nil fsm_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (trace type-eq-decl nil fsm_def nil)
    (< const-decl "bool" reals nil)
    (nextstate_reject formula-decl nil fsm_def nil))
   131 130 t shostak))
 (goto_next_other 0
  (goto_next_other-1 nil 3302272818 3302341179
   ("" (skosimp*)
    (("" (rewrite "goto_next")
      (("" (rewrite "nextstate_other") nil nil)) nil))
    nil)
   proved
   ((goto_next formula-decl nil fsm_def nil)
    (event formal-nonempty-type-decl nil fsm_def nil)
    (pred type-eq-decl nil defined_types nil)
    (state type-eq-decl nil fsm_def nil)
    (state_opt formal-nonempty-type-decl nil fsm_def nil)
    (fsm type-eq-decl nil fsm_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (trace type-eq-decl nil fsm_def nil)
    (goto def-decl "state_opt" fsm_def nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nextstate_other formula-decl nil fsm_def nil)
    (< const-decl "bool" reals nil))
   188 160 t shostak))
 (goto_TCC4 0
  (goto_TCC4-1 nil 3302272643 3302341179 ("" (subtype-tcc) nil nil)
   proved nil 13 10 nil shostak))
 (goto_prefix 0
  (goto_prefix-1 nil 3302272902 3302341180
   ("" (skosimp*)
    (("" (expand "goto" + 1)
      (("" (expand "prefix" + 2)
        ((""
          (case "FORALL (j: upto(i!1)): goto(fs!1, prefix(t!1, i!1), j) = goto(fs!1, t!1, j)")
          (("1" (inst?) nil nil)
           ("2" (hide 2)
            (("2" (induct "j")
              (("1" (expand "goto") (("1" (propax) nil nil)) nil)
               ("2" (skosimp*)
                (("2" (rewrite "goto_next" +)
                  (("2" (rewrite "goto_next" +)
                    (("2" (replace -2)
                      (("2" (expand "prefix" +)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2) (("3" (grind) nil nil)) nil)
               ("4" (hide 2)
                (("4" (expand "prefix") (("4" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (hide 2) (("3" (grind) nil nil)) nil)
           ("4" (hide 2)
            (("4" (expand "prefix") (("4" (propax) nil nil)) nil)) nil)
           ("5" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((goto const-decl "state_opt" fsm_def nil)
    (trace type-eq-decl nil traces nil)
    (goto def-decl "state_opt" fsm_def nil)
    (trace type-eq-decl nil fsm_def nil)
    (below type-eq-decl nil nat_types nil)
    (fsm type-eq-decl nil fsm_def nil)
    (state type-eq-decl nil fsm_def nil)
    (pred type-eq-decl nil defined_types nil)
    (event formal-nonempty-type-decl nil fsm_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (state_opt formal-nonempty-type-decl nil fsm_def nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (i!1 skolem-const-decl "nat" fsm_def nil)
    (t!1 skolem-const-decl "trace" fsm_def nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (goto_next formula-decl nil fsm_def nil)
    (prefix const-decl "{t1 | t1`length = n}" traces nil))
   1100 1010 t shostak))
 (goto_add 0
  (goto_add-1 nil 3302188457 3302341181
   ("" (skosimp*)
    (("" (expand "goto" + 1)
      (("" (expand "add" + 2)
        (("" (expand "goto" + 2)
          (("" (rewrite "goto_next")
            (("" (lemma "goto_prefix")
              (("" (inst - "fs!1" "t!1`length" "add(t!1, e!1)")
                (("" (split)
                  (("1"
                    (case-replace
                     "prefix(add(t!1, e!1), t!1`length)=t!1")
                    (("1" (expand "goto" -2 1)
                      (("1" (replace -2)
                        (("1" (replace -2 :dir rl)
                          (("1" (hide -)
                            (("1" (lemma "add_elem_length[event]")
                              (("1"
                                (expand "finseq_appl")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (replace -1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1 2)
                      (("2" (expand "prefix")
                        (("2" (apply-extensionality)
                          (("2" (hide 2)
                            (("2" (expand "add")
                              (("2" (apply-extensionality) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "add") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((goto const-decl "state_opt" fsm_def nil)
    (goto_prefix formula-decl nil fsm_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (add_elem_length formula-decl nil traces nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (prefix const-decl "{t1 | t1`length = n}" traces nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (trace type-eq-decl nil traces nil)
    (trace type-eq-decl nil fsm_def nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (fsm type-eq-decl nil fsm_def nil)
    (state_opt formal-nonempty-type-decl nil fsm_def nil)
    (state type-eq-decl nil fsm_def nil)
    (pred type-eq-decl nil defined_types nil)
    (event formal-nonempty-type-decl nil fsm_def nil)
    (goto_next formula-decl nil fsm_def nil)
    (add const-decl "{t1 | t1`length = t`length + 1}" traces nil))
   1000 920 t shostak))
 (goto_add_reject 0
  (goto_add_reject-1 nil 3302188745 3302341181
   ("" (skosimp*)
    (("" (rewrite "goto_add")
      (("" (replace -1)
        (("" (hide -1) (("" (rewrite "nextstate_reject") nil nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((goto_add formula-decl nil fsm_def nil)
    (event formal-nonempty-type-decl nil fsm_def nil)
    (pred type-eq-decl nil defined_types nil)
    (state type-eq-decl nil fsm_def nil)
    (state_opt formal-nonempty-type-decl nil fsm_def nil)
    (fsm type-eq-decl nil fsm_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (trace type-eq-decl nil fsm_def nil)
    (nextstate_reject formula-decl nil fsm_def nil))
   70 60 t shostak))
 (goto_add_other 0
  (goto_add_other-1 nil 3302188789 3302341181
   ("" (skosimp*)
    (("" (rewrite "goto_add")
      (("" (rewrite "nextstate_other") nil nil)) nil))
    nil)
   proved
   ((goto_add formula-decl nil fsm_def nil)
    (event formal-nonempty-type-decl nil fsm_def nil)
    (pred type-eq-decl nil defined_types nil)
    (state type-eq-decl nil fsm_def nil)
    (state_opt formal-nonempty-type-decl nil fsm_def nil)
    (fsm type-eq-decl nil fsm_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (trace type-eq-decl nil fsm_def nil)
    (goto const-decl "state_opt" fsm_def nil)
    (nextstate_other formula-decl nil fsm_def nil))
   72 60 t shostak))
 (goto_proj 0
  (goto_proj-2 nil 3302332500 3302341182
   ("" (induct "t" :name "add_induction[event]")
    (("1" (skosimp*) (("1" (rewrite "proj_empty") nil nil)) nil)
     ("2" (skosimp*)
      (("2" (inst?)
        (("2" (rewrite "goto_add")
          (("2" (rewrite "proj_add")
            (("2" (lift-if)
              (("2" (prop)
                (("1" (rewrite "goto_add")
                  (("1" (replace -2) (("1" (propax) nil nil)) nil))
                  nil)
                 ("2" (rewrite -1 :dir rl)
                  (("2" (hide -1)
                    (("2" (rewrite "nextstate_other") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((goto_add formula-decl nil fsm_def nil)
    (nextstate_other formula-decl nil fsm_def nil)
    (proj_add formula-decl nil traces nil)
    (proj_empty formula-decl nil traces nil)
    (add_induction formula-decl nil traces nil)
    (event formal-nonempty-type-decl nil fsm_def nil)
    (proj const-decl "trace" traces nil)
    (setof type-eq-decl nil defined_types nil)
    (goto const-decl "state_opt" fsm_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fsm type-eq-decl nil fsm_def nil)
    (state_opt formal-nonempty-type-decl nil fsm_def nil)
    (state type-eq-decl nil fsm_def nil)
    (trace type-eq-decl nil fsm_def nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (trace type-eq-decl nil traces nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   312 260 t nil)
  (goto_proj-1 nil 3302275779 3302332481
   ("" (induct "t" :name "add_induction")
    (("1" (skosimp*) (("1" (rewrite "proj_empty") nil nil)) nil)
     ("2" (skosimp*)
      (("2" (inst?)
        (("2" (rewrite "goto_add")
          (("2" (rewrite "proj_add")
            (("2" (lift-if)
              (("2" (prop)
                (("1" (rewrite "goto_add")
                  (("1" (replace -2) (("1" (propax) nil nil)) nil))
                  nil)
                 ("2" (rewrite -1 :dir rl)
                  (("2" (hide -1)
                    (("2" (rewrite "nextstate_other") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((goto_add formula-decl nil fsm_def nil)
    (nextstate_other formula-decl nil fsm_def nil)
    (proj_add formula-decl nil traces nil)
    (proj_empty formula-decl nil traces nil)
    (add_induction formula-decl nil traces nil)
    (event formal-nonempty-type-decl nil fsm_def nil)
    (proj const-decl "trace" traces nil)
    (setof type-eq-decl nil defined_types nil)
    (goto const-decl "state_opt" fsm_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fsm type-eq-decl nil fsm_def nil)
    (state_opt formal-nonempty-type-decl nil fsm_def nil)
    (state type-eq-decl nil fsm_def nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (trace type-eq-decl nil traces nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   92654 1220 t shostak))
 (valid_trace_prefix 0
  (valid_trace_prefix-2 nil 3302332614 3302341183
   ("" (skosimp*)
    ((""
      (case "FORALL (j: upto(t!1`length)): valid_trace(fs!1)(prefix(t!1,t!1`length-j))")
      (("1" (inst - "t!1`length - i!1")
        (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
       ("2" (hide 2)
        (("2" (induct "j")
          (("1" (assert) (("1" (rewrite "prefix_full") nil nil)) nil)
           ("2" (skosimp*)
            (("2" (assert)
              (("2" (lemma "prefix_next[event]")
                (("2" (inst - "t!1" "t!1`length - 1 - jt!1")
                  (("2" (assert)
                    (("2" (replace -1)
                      (("2" (hide -1 -4)
                        (("2" (expand "valid_trace")
                          (("2" (lemma "goto_add_reject")
                            (("2"
                              (inst - "t!1`seq(t!1`length - 1 - jt!1)"
                               "fs!1"
                               "prefix(t!1, t!1`length - 1 - jt!1)")
                              (("2"
                                (split)
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (prefix const-decl "{t1 | t1`length = n}" traces nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (trace type-eq-decl nil traces nil)
    (valid_trace const-decl "bool" fsm_def nil)
    (fsm type-eq-decl nil fsm_def nil)
    (state_opt formal-nonempty-type-decl nil fsm_def nil)
    (state type-eq-decl nil fsm_def nil)
    (pred type-eq-decl nil defined_types nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (trace type-eq-decl nil fsm_def nil)
    (event formal-nonempty-type-decl nil fsm_def nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (i!1 skolem-const-decl "nat" fsm_def nil)
    (t!1 skolem-const-decl "trace" fsm_def nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (prefix_full formula-decl nil traces nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (goto_add_reject formula-decl nil fsm_def nil)
    (prefix_next formula-decl nil traces nil))
   1043 990 t nil)
  (valid_trace_prefix-1 nil 3302240159 3302332598
   ("" (skosimp*)
    ((""
      (case "FORALL (j: upto(t!1`length)): valid_trace(fs!1)(prefix(t!1,t!1`length-j))")
      (("1" (inst - "t!1`length - i!1")
        (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
       ("2" (hide 2)
        (("2" (induct "j")
          (("1" (assert) (("1" (rewrite "prefix_full") nil nil)) nil)
           ("2" (skosimp*)
            (("2" (assert)
              (("2" (lemma "prefix_next")
                (("2" (inst - "t!1" "t!1`length - 1 - jt!1")
                  (("2" (assert)
                    (("2" (replace -1)
                      (("2" (hide -1 -4)
                        (("2" (expand "valid_trace")
                          (("2" (lemma "goto_add_reject")
                            (("2"
                              (inst - "t!1`seq(t!1`length - 1 - jt!1)"
                               "fs!1"
                               "prefix(t!1, t!1`length - 1 - jt!1)")
                              (("2"
                                (split)
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (prefix const-decl "{t1 | t1`length = n}" traces nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (valid_trace const-decl "bool" fsm_def nil)
    (fsm type-eq-decl nil fsm_def nil)
    (state_opt formal-nonempty-type-decl nil fsm_def nil)
    (state type-eq-decl nil fsm_def nil)
    (pred type-eq-decl nil defined_types nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (trace type-eq-decl nil traces nil)
    (event formal-nonempty-type-decl nil fsm_def nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (prefix_full formula-decl nil traces nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (goto_add_reject formula-decl nil fsm_def nil)
    (prefix_next formula-decl nil traces nil))
   49939 1330 t shostak))
 (valid_trace_proj 0
  (valid_trace_proj-1 nil 3302274656 3302341183
   ("" (skosimp*)
    (("" (expand "valid_trace") (("" (rewrite "goto_proj") nil nil))
      nil))
    nil)
   proved
   ((valid_trace const-decl "bool" fsm_def nil)
    (trace type-eq-decl nil fsm_def nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fsm type-eq-decl nil fsm_def nil)
    (state_opt formal-nonempty-type-decl nil fsm_def nil)
    (state type-eq-decl nil fsm_def nil)
    (pred type-eq-decl nil defined_types nil)
    (event formal-nonempty-type-decl nil fsm_def nil)
    (goto_proj formula-decl nil fsm_def nil))
   50 40 t shostak))
 (fsm_induction_TCC1 0
  (fsm_induction_TCC1-1 nil 3302277490 3302341290
   ("" (skosimp*)
    (("" (expand "valid_trace" -3) (("" (assert) nil nil)) nil)) nil)
   proved ((valid_trace const-decl "bool" fsm_def nil)) 73350 1830 t
   shostak))
 (fsm_induction 0
  (fsm_induction-2 nil 3302323790 3302341184
   ("" (skolem!)
    (("" (flatten)
      (("" (induct "t" :name "add_induction[event]")
        (("1" (rewrite "proj_empty")
          (("1" (expand "goto" +)
            (("1" (expand "empty_trace" + 4)
              (("1" (expand "empty_seq" +)
                (("1" (expand "goto") (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*)
          (("2" (hide -4)
            (("2" (case-replace "valid_trace(fs!1)(t!1)")
              (("1" (expand "valid_trace")
                (("1" (rewrite "proj_add")
                  (("1" (rewrite "goto_add")
                    (("1" (rewrite "nextstate")
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (prop)
                            (("1" (reveal -1)
                              (("1"
                                (inst
                                 -
                                 "proj(t!1, fs!1`event?)"
                                 "goto(fs!1, t!1)"
                                 "a!1")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2 -1 -3 -4)
                (("2" (expand "valid_trace")
                  (("2" (rewrite "goto_add")
                    (("2" (lemma "nextstate_reject")
                      (("2" (inst - "a!1" "fs!1")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide - 2)
          (("3" (expand "valid_trace") (("3" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((proj_add formula-decl nil traces nil)
    (nextstate const-decl "state_opt" fsm_def nil)
    (a!1 skolem-const-decl "event" fsm_def nil)
    (goto_add formula-decl nil fsm_def nil)
    (nextstate_reject formula-decl nil fsm_def nil)
    (proj_empty formula-decl nil traces nil)
    (empty_trace const-decl "{t | t`length = 0}" traces nil)
    (goto def-decl "state_opt" fsm_def nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (add_induction formula-decl nil traces nil)
    (event formal-nonempty-type-decl nil fsm_def nil)
    (proj const-decl "trace" traces nil)
    (setof type-eq-decl nil defined_types nil)
    (trace type-eq-decl nil traces nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (trace type-eq-decl nil fsm_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (state type-eq-decl nil fsm_def nil)
    (state_opt formal-nonempty-type-decl nil fsm_def nil)
    (fsm type-eq-decl nil fsm_def nil)
    (valid_trace const-decl "bool" fsm_def nil)
    (fs!1 skolem-const-decl "fsm" fsm_def nil)
    (/= const-decl "boolean" notequal nil)
    (goto const-decl "state_opt" fsm_def nil)
    (Reject formal-const-decl "state_opt" fsm_def nil))
   553 450 t nil)
  (fsm_induction-1 nil 3302315683 3302323766
   ("" (skolem!)
    (("" (flatten)
      (("" (expand "proj_invariant")
        (("" (induct "t" :name "add_induction[event]")
          (("1" (flatten)
            (("1" (hide -1 -2 -4)
              (("1" (expand "goto")
                (("1" (expand "goto")
                  (("1" (expand "empty_trace")
                    (("1" (expand "empty_seq") (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*) (("2" (postpone) nil nil)) nil)
           ("3" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 117675 1890 t shostak)))

