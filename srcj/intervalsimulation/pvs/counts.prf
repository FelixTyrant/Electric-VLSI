(counts
 (count_TCC1 0
  (count_TCC1-1 nil 3302010668 3302015849 ("" (subtype-tcc) nil nil)
   proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   170 140 nil shostak))
 (count_TCC2 0
  (count_TCC2-1 nil 3302010668 3302015849
   ("" (subtype-tcc) (("" (postpone) nil nil)) nil) proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   28 30 nil shostak))
 (count_card_finite 0
  (count_card_finite-2 nil 3302074645 3302185188
   ("" (skosimp*)
    (("" (lemma "finite_subset[nat]")
      (("" (inst - "{i | i < k!1}" "{i | i < k!1 & S!1(i)}")
        (("1" (prop) (("1" (hide 2) (("1" (grind) nil nil)) nil)) nil)
         ("2" (hide 2)
          (("2" (expand "is_finite")
            (("2" (inst + "k!1" "id")
              (("2" (typepred "id")
                (("2" (expand "bijective?") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_subset formula-decl nil finite_sets nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (< const-decl "bool" reals nil)
    (k!1 skolem-const-decl "nat" counts nil))
   539 380 t nil)
  (count_card_finite-1 nil 3302072521 3302074626
   ("" (skosimp*)
    (("" (lemma "finite_subset[nat]")
      (("" (inst - "{i | i < n!1}" "{i | i < n!1 & S!1(i)}")
        (("1" (prop) (("1" (hide 2) (("1" (grind) nil nil)) nil)) nil)
         ("2" (hide 2)
          (("2" (expand "is_finite")
            (("2" (inst + "n!1" "id")
              (("2" (typepred "id")
                (("2" (expand "bijective?") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_subset formula-decl nil finite_sets nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (< const-decl "bool" reals nil))
   52944 970 t shostak))
 (count_card_TCC1 0
  (count_card_TCC1-1 nil 3302069147 3302072508
   ("" (skosimp*) (("" (rewrite "count_card_finite") nil nil)) nil)
   proved-incomplete
   ((finite_subset formula-decl nil finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (subset? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (< const-decl "bool" reals nil)
    (finite_type_set formula-decl nil finite_sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (is_finite_type const-decl "bool" finite_sets nil)
    (identity const-decl "(bijective?[T, T])" identity nil)
    (count_card_finite formula-decl nil counts nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil))
   17237 740 t shostak))
 (count_card 0
  (count_card-2 nil 3302074680 3302185191
   ("" (induct "k")
    (("1" (grind)
      (("1" (lemma "card_emptyset[nat]")
        (("1" (expand "emptyset") (("1" (grind) nil nil)) nil)) nil))
      nil)
     ("2" (skosimp*)
      (("2" (inst?)
        (("2" (expand "count" +)
          (("2" (replace -1)
            (("2" (hide -1)
              (("2" (expand "b2n")
                (("2" (case-replace "S!1(j!1)")
                  (("1"
                    (case-replace
                     "{i | i < j!1 + 1 & S!1(i)}=add(j!1,{i | i < j!1 & S!1(i)})")
                    (("1" (hide -1)
                      (("1" (rewrite "card_add")
                        (("1" (hide 2 -1)
                          (("1" (rewrite "count_card_finite") nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (apply-extensionality)
                        (("2" (hide 2)
                          (("2" (expand "add") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2"
                      (case-replace
                       "{i | i < j!1 & S!1(i)}={i | i < 1 + j!1 & S!1(i)}")
                      (("2" (hide 3)
                        (("2" (apply-extensionality)
                          (("2" (hide 2) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skosimp*) (("3" (rewrite "count_card_finite") nil nil))
        nil))
      nil))
    nil)
   proved
   ((member const-decl "bool" sets nil)
    (count_card_finite formula-decl nil counts nil)
    (card_add formula-decl nil finite_sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (b2n const-decl "nbit" bit nil)
    (emptyset const-decl "set" sets nil)
    (card_emptyset formula-decl nil finite_sets nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (count def-decl "nat" counts nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil))
   2303 1900 t nil)
  (count_card-1 nil 3302069778 3302072473
   ("" (induct "n")
    (("1" (grind)
      (("1" (lemma "card_emptyset[nat]")
        (("1" (expand "emptyset") (("1" (grind) nil nil)) nil)) nil))
      nil)
     ("2" (skosimp*)
      (("2" (inst?)
        (("2" (expand "count" +)
          (("2" (replace -1)
            (("2" (hide -1)
              (("2" (expand "b2n")
                (("2" (case-replace "S!1(j!1)")
                  (("1"
                    (case-replace
                     "{i | i < j!1 + 1 & S!1(i)}=add(j!1,{i | i < j!1 & S!1(i)})")
                    (("1" (hide -1)
                      (("1" (rewrite "card_add")
                        (("1" (hide 2 -1)
                          (("1" (rewrite "count_card_finite") nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (apply-extensionality)
                        (("2" (hide 2)
                          (("2" (expand "add") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2"
                      (case-replace
                       "{i | i < j!1 & S!1(i)}={i | i < 1 + j!1 & S!1(i)}")
                      (("2" (hide 3)
                        (("2" (apply-extensionality)
                          (("2" (hide 2) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skosimp*) (("3" (rewrite "count_card_finite") nil nil))
        nil))
      nil))
    nil)
   unchecked
   ((< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (count def-decl "nat" counts nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (card_emptyset formula-decl nil finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (b2n const-decl "nbit" bit nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (card_add formula-decl nil finite_sets nil)
    (count_card_finite formula-decl nil counts nil)
    (member const-decl "bool" sets nil))
   30420 2640 t shostak))
 (count_bound 0
  (count_bound-2 nil 3302074708 3302185191
   ("" (induct "k")
    (("1" (grind) nil nil)
     ("2" (skosimp*)
      (("2" (expand "count" +)
        (("2" (inst?)
          (("2" (expand "b2n")
            (("2" (lift-if) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((b2n const-decl "nbit" bit nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (count def-decl "nat" counts nil) (<= const-decl "bool" reals nil)
    (set type-eq-decl nil sets nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   170 150 t nil)
  (count_bound-1 nil 3302015863 3302072753
   ("" (induct "n")
    (("1" (grind) nil nil)
     ("2" (skosimp*)
      (("2" (expand "count" +)
        (("2" (inst?)
          (("2" (expand "b2n")
            (("2" (lift-if) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((b2n const-decl "nbit" bit nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (count def-decl "nat" counts nil) (<= const-decl "bool" reals nil)
    (set type-eq-decl nil sets nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   180 130 t shostak))
 (count_TCC3 0
  (count_TCC3-1 nil 3302010669 3302015782
   ("" (skosimp*) (("" (rewrite "count_bound") nil nil)) nil)
   proved-incomplete
   ((set type-eq-decl nil sets nil)
    (count_bound formula-decl nil counts nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil))
   22800 590 t shostak))
 (equal_prefix_nonincrease 0
  (equal_prefix_nonincrease-1 nil 3302172835 3302185191
   ("" (skosimp*)
    (("" (expand "equal_prefix")
      (("" (skosimp*) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((equal_prefix const-decl "bool" counts nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (l!1 skolem-const-decl "nat" counts nil)
    (i!1 skolem-const-decl "below(k!1)" counts nil)
    (k!1 skolem-const-decl "nat" counts nil))
   146 130 t shostak))
 (count_eq 0
  (count_eq-1 nil 3302170737 3302185192
   ("" (induct "k")
    (("1" (grind) nil nil)
     ("2" (skosimp*)
      (("2" (inst - "S!1" "S1!1")
        (("2" (expand "count" +)
          (("2" (expand "equal_prefix")
            (("2" (split)
              (("1" (inst?) (("1" (assert) nil nil)) nil)
               ("2" (hide 2)
                (("2" (skosimp*) (("2" (inst?) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (count def-decl "nat" counts nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equal_prefix const-decl "bool" counts nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   910 860 t shostak))
 (count_next 0
  (count_next-2 nil 3302074737 3302185192
   ("" (skosimp*)
    (("" (expand "count" + 1) (("" (propax) nil nil)) nil)) nil)
   proved ((count def-decl "nat" counts nil)) 41 40 t nil)
  (count_next-1 nil 3302015798 3302072753
   ("" (skosimp*)
    (("" (expand "count" + 1) (("" (propax) nil nil)) nil)) nil)
   unchecked ((count def-decl "nat" counts nil)) 63 60 t shostak))
 (count_next_true 0
  (count_next_true-1 nil 3302072797 3302185193
   ("" (skosimp*)
    (("" (rewrite "count_next")
      (("" (expand "b2n") (("" (assert) nil nil)) nil)) nil))
    nil)
   proved
   ((count_next formula-decl nil counts nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil) (b2n const-decl "nbit" bit nil))
   504 480 t shostak))
 (count_next_false 0
  (count_next_false-1 nil 3302072853 3302185193
   ("" (skosimp*)
    (("" (rewrite "count_next")
      (("" (expand "b2n") (("" (assert) nil nil)) nil)) nil))
    nil)
   proved
   ((count_next formula-decl nil counts nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil) (b2n const-decl "nbit" bit nil))
   473 460 t shostak))
 (count_range_false_TCC1 0
  (count_range_false_TCC1-1 nil 3302143432 3302148709
   ("" (subtype-tcc) nil nil) proved-complete nil 38 30 nil shostak))
 (count_range_false 0
  (count_range_false-1 nil 3302143445 3302185194
   ("" (induct "l")
    (("1" (skosimp*) (("1" (hide -2) (("1" (assert) nil nil)) nil))
      nil)
     ("2" (skosimp*)
      (("2" (case-replace "j!1=k!1-1")
        (("1" (assert) nil nil)
         ("2" (inst -3 "j!1")
          (("1" (rewrite "count_next_false")
            (("1" (inst?)
              (("1" (split)
                (("1" (propax) nil nil)
                 ("2" (hide 3 4) (("2" (assert) nil nil)) nil)
                 ("3" (hide 3 4)
                  (("3" (skosimp*)
                    (("3" (reveal -2) (("3" (inst?) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -1 3) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((k!1 skolem-const-decl "nat" counts nil)
    (j!1 skolem-const-decl "nat" counts nil)
    (count_next_false formula-decl nil counts nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (count def-decl "nat" counts nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   766 700 t shostak))
 (count_tail_false 0
  (count_tail_false-1 nil 3302168579 3302185194
   ("" (skosimp*)
    (("" (lemma "count_range_false")
      (("" (inst - "S!1" "k!1" "i!1")
        (("" (assert)
          (("" (hide 2) (("" (skosimp*) (("" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((count_range_false formula-decl nil counts nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   191 160 t shostak))
 (count_nondecreasing 0
  (count_nondecreasing-1 nil 3302145806 3302185195
   ("" (induct "l")
    (("1" (grind) nil nil)
     ("2" (skosimp*)
      (("2" (case-replace "j!1=k!1-1")
        (("1" (assert) nil nil)
         ("2" (inst -1 "S!1" "k!1")
          (("2" (split)
            (("1" (lemma "count_next")
              (("1" (inst - "S!1" "j!1")
                (("1" (replace -1)
                  (("1" (hide -1) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (hide 3) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((count_next formula-decl nil counts nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (count def-decl "nat" counts nil) (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   832 770 t shostak))
 (count_increasing 0
  (count_increasing-1 nil 3302146041 3302185196
   ("" (skosimp*)
    (("" (lemma "count_next_true")
      (("" (inst - "S!1" "k!1")
        (("" (assert)
          (("" (lemma "count_nondecreasing")
            (("" (inst - "S!1" "1+k!1" "l!1") (("" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((count_next_true formula-decl nil counts nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (count_nondecreasing formula-decl nil counts nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   558 540 t shostak))
 (count_injective 0
  (count_injective-1 nil 3302166269 3302185196
   ("" (skosimp*)
    (("" (case "k!1 < l!1")
      (("1" (lemma "count_increasing")
        (("1" (inst - "S!1" "k!1" "l!1") (("1" (assert) nil nil)) nil))
        nil)
       ("2" (lemma "count_increasing")
        (("2" (inst - "S!1" "l!1" "k!1")
          (("2" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (set type-eq-decl nil sets nil)
    (count_increasing formula-decl nil counts nil))
   207 130 t shostak))
 (count_complement 0
  (count_complement-2 nil 3302145361 3302185197
   ("" (induct "k")
    (("1" (grind) nil nil)
     ("2" (skosimp*)
      (("2" (inst?)
        (("2" (expand "count" +)
          (("2" (expand "b2n")
            (("2" (expand "complement" + 1)
              (("2" (expand "member")
                (("2" (lift-if) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((member const-decl "bool" sets nil) (b2n const-decl "nbit" bit nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (complement const-decl "set" sets nil)
    (count def-decl "nat" counts nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   798 750 nil nil)
  (count_complement-1 nil 3302072891 3302145349
   ("" (induct "n")
    (("1" (grind) nil nil)
     ("2" (skosimp*)
      (("2" (inst?)
        (("2" (expand "count" +)
          (("2" (expand "b2n")
            (("2" (expand "complement" + 1)
              (("2" (expand "member")
                (("2" (lift-if) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((member const-decl "bool" sets nil) (b2n const-decl "nbit" bit nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (complement const-decl "set" sets nil)
    (count def-decl "nat" counts nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   86790 12410 t shostak))
 (count_exists 0
  (count_exists-1 nil 3302073258 3302185197
   ("" (skosimp*)
    (("" (rewrite "count_card")
      (("" (lemma "nonempty_card[nat]")
        (("" (inst?)
          (("1" (iff)
            (("1" (expand "nonempty?")
              (("1" (expand "empty?")
                (("1" (expand "member")
                  (("1" (prop)
                    (("1" (hide -)
                      (("1" (skosimp*)
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (hide +)
                      (("2" (skosimp*)
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "count_card_finite") nil nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((count_card formula-decl nil counts nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (S!1 skolem-const-decl "set[nat]" counts nil)
    (k!1 skolem-const-decl "nat" counts nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (count_card_finite formula-decl nil counts nil)
    (nonempty_card formula-decl nil finite_sets nil))
   318 270 t shostak))
 (count_forall 0
  (count_forall-2 nil 3302074797 3302185198
   ("" (skosimp*)
    (("" (lemma "count_complement")
      (("" (inst?)
        ((""
          (case-replace
           "(count(k!1, complement(S!1))=0)=FORALL i: i < k!1 IMPLIES S!1(i)")
          (("1" (replace -1 :dir rl)
            (("1" (hide -1)
              (("1" (iff)
                (("1" (prop)
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (hide 2 -1)
            (("2" (lemma "count_exists")
              (("2" (inst?)
                (("2" (iff)
                  (("2" (expand "complement")
                    (("2" (expand "member")
                      (("2" (prop)
                        (("1" (hide -3 1) (("1" (assert) nil nil)) nil)
                         ("2" (hide -2 1)
                          (("2" (skosimp*)
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide -1 3)
                          (("3" (skosimp*)
                            (("3" (inst?) (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("4" (hide -1 2) (("4" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((count_complement formula-decl nil counts nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (count def-decl "nat" counts nil)
    (complement const-decl "set" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (count_exists formula-decl nil counts nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   726 680 nil nil)
  (count_forall-1 nil 3302073710 3302074232
   ("" (skosimp*)
    (("" (lemma "count_complement")
      (("" (inst?)
        ((""
          (case-replace
           "(count(n!1, complement(S!1))=0)=FORALL i: i < n!1 IMPLIES S!1(i)")
          (("1" (replace -1 :dir rl)
            (("1" (hide -1)
              (("1" (iff)
                (("1" (prop)
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (hide 2 -1)
            (("2" (lemma "count_exists")
              (("2" (inst?)
                (("2" (iff)
                  (("2" (expand "complement")
                    (("2" (expand "member")
                      (("2" (prop)
                        (("1" (hide -3 1) (("1" (assert) nil nil)) nil)
                         ("2" (hide -2 1)
                          (("2" (skosimp*)
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide -1 3)
                          (("3" (skosimp*)
                            (("3" (inst?) (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("4" (hide -1 2) (("4" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((count_complement formula-decl nil counts nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (count def-decl "nat" counts nil)
    (complement const-decl "set" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (count_exists formula-decl nil counts nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   495055 7550 t shostak))
 (nth_TCC1 0
  (nth_TCC1-1 nil 3302164014 3302185198 ("" (subtype-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (below_card? const-decl "bool" counts nil)
    (below_card type-eq-decl nil counts nil)
    (nth_helper_set const-decl "set[nat]" counts nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   152 130 nil shostak))
 (nth_lemma 0
  (nth_lemma-2 nil 3302184317 3302185199
   ("" (skosimp*)
    (("" (expand "nth")
      (("" (name-replace "m" "min(nth_helper_set(S!1, n!1))")
        (("1" (typepred "m")
          (("1" (expand "nth_helper_set")
            (("1" (case-replace "m=0")
              (("1" (hide -3)
                (("1" (expand "count")
                  (("1" (expand "count")
                    (("1" (expand "b2n") (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (inst - "m-1")
                (("1" (assert)
                  (("1" (expand "count" -)
                    (("1" (expand "b2n")
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (split)
                            (("1" (flatten) (("1" (assert) nil nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (typepred "n!1")
            (("2" (expand "below_card?") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((nth const-decl "nat" counts nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (count def-decl "nat" counts nil) (b2n const-decl "nbit" bit nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (S!1 skolem-const-decl "set[nat]" counts nil)
    (n!1 skolem-const-decl "below_card(S!1)" counts nil)
    (m skolem-const-decl "{a |
         nth_helper_set(S!1, n!1)(a) AND
          (FORALL (x: nat): nth_helper_set(S!1, n!1)(x) IMPLIES a <= x)}"
     counts nil)
    (below_card type-eq-decl nil counts nil)
    (below_card? const-decl "bool" counts nil)
    (nth_helper_set const-decl "set[nat]" counts nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
         min_nat nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   1077 990 t nil)
  (nth_lemma-1 nil 3302184285 3302184298 ("" (postpone) nil nil)
   unfinished nil 12099 130 t shostak))
 (nth_TCC2 0
  (nth_TCC2-2 nil 3302185308 3302185314
   ("" (skosimp*)
    (("" (lemma "nth_lemma") (("" (inst?) (("" (assert) nil nil)) nil))
      nil))
    nil)
   proved
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (below_card? const-decl "bool" counts nil)
    (below_card type-eq-decl nil counts nil)
    (nth_lemma formula-decl nil counts nil))
   4046 50 t nil)
  (nth_TCC2-1 nil 3302164014 3302185290
   ("" (skosimp*)
    (("" (lemma "count_nth_prop")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   unfinished
   ((count_nth_prop formula-decl nil counts nil)
    (below_card type-eq-decl nil counts nil)
    (below_card? const-decl "bool" counts nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   41539 1440 t shostak))
 (count_nth_prop 0
  (count_nth_prop-1 nil 3302163962 3302185199
   ("" (skosimp*)
    (("" (lemma "nth_lemma") (("" (inst?) (("" (assert) nil nil)) nil))
      nil))
    nil)
   proved
   ((nth_lemma formula-decl nil counts nil)
    (below_card type-eq-decl nil counts nil)
    (below_card? const-decl "bool" counts nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   80 60 t nil))
 (nth_count_TCC1 0
  (nth_count_TCC1-1 nil 3302164261 3302185200
   ("" (skosimp*)
    (("" (expand "below_card?")
      (("" (typepred "k!1")
        (("" (expand "nonempty?")
          (("" (expand "empty?")
            (("" (expand "member")
              (("" (expand "nth_helper_set")
                (("" (inst - "k!1")
                  (("" (expand "count" + 1)
                    (("" (expand "b2n") (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((below_card? const-decl "bool" counts nil)
    (nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil) (b2n const-decl "nbit" bit nil)
    (count def-decl "nat" counts nil)
    (nth_helper_set const-decl "set[nat]" counts nil)
    (empty? const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil))
   516 480 t shostak))
 (nth_count 0
  (nth_count-2 nil 3302184429 3302185201
   ("" (skosimp*)
    (("" (typepred "k!1")
      (("" (case "count(nth(S!1)(count(k!1, S!1)),S!1)=count(k!1,S!1)")
        (("1" (lemma "count_injective")
          (("1" (inst?)
            (("1" (assert) nil nil)
             ("2" (rewrite "count_nth_prop")
              (("2" (hide 2)
                (("2" (expand "below_card?")
                  (("2" (expand "nonempty?")
                    (("2" (expand "empty?")
                      (("2" (expand "member")
                        (("2" (expand "nth_helper_set")
                          (("2" (inst - "k!1")
                            (("2" (rewrite "count_next_true")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "count_nth_prop") nil nil)
         ("3" (hide 2)
          (("3" (expand "below_card?")
            (("3" (expand "nonempty?")
              (("3" (expand "empty?")
                (("3" (expand "member")
                  (("3" (expand "nth_helper_set")
                    (("3" (inst - "k!1")
                      (("3" (rewrite "count_next_true")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (count_injective formula-decl nil counts nil)
    (count_nth_prop formula-decl nil counts nil)
    (empty? const-decl "bool" sets nil)
    (nth_helper_set const-decl "set[nat]" counts nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (count_next_true formula-decl nil counts nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (k!1 skolem-const-decl "(S!1)" counts nil)
    (S!1 skolem-const-decl "set[nat]" counts nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (count def-decl "nat" counts nil)
    (below_card? const-decl "bool" counts nil)
    (below_card type-eq-decl nil counts nil)
    (nth const-decl "nat" counts nil))
   1209 1150 t nil)
  (nth_count-1 nil 3302164266 3302178030
   ("" (skosimp*)
    (("" (typepred "k!1")
      (("" (case "count(nth(S!1)(count(k!1, S!1)),S!1)=count(k!1,S!1)")
        (("1" (lemma "count_injective")
          (("1" (inst?)
            (("1" (assert) nil nil)
             ("2" (rewrite "count_nth")
              (("2" (hide 2)
                (("2" (expand "below_card?")
                  (("2" (expand "nonempty?")
                    (("2" (expand "empty?")
                      (("2" (expand "member")
                        (("2" (expand "nth_helper_set")
                          (("2" (inst - "k!1")
                            (("2" (rewrite "count_next_true")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "count_nth") nil nil)
         ("3" (hide 2)
          (("3" (expand "below_card?")
            (("3" (expand "nonempty?")
              (("3" (expand "empty?")
                (("3" (expand "member")
                  (("3" (expand "nth_helper_set")
                    (("3" (inst - "k!1")
                      (("3" (rewrite "count_next_true")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (count_injective formula-decl nil counts nil)
    (empty? const-decl "bool" sets nil)
    (nth_helper_set const-decl "set[nat]" counts nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (count_next_true formula-decl nil counts nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (count def-decl "nat" counts nil)
    (below_card? const-decl "bool" counts nil)
    (below_card type-eq-decl nil counts nil)
    (nth const-decl "nat" counts nil))
   1245 1190 t shostak))
 (below_card_def 0
  (below_card_def-1 nil 3302167884 3302185202
   ("" (skosimp*)
    (("" (lemma "count_tail_false")
      (("" (inst - "S!1" "l!1")
        (("" (split)
          (("1" (case "FORALL i: count(i, S!1) <= count(l!1, S!1)")
            (("1" (hide -2 -3)
              (("1" (expand "below_card?")
                (("1" (expand "nonempty?")
                  (("1" (expand "empty?")
                    (("1" (expand "member")
                      (("1" (expand "nth_helper_set")
                        (("1" (iff)
                          (("1" (split)
                            (("1" (flatten)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst?)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (inst -2 "l!1-1")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (case-replace "l!1=0")
                                  (("1"
                                    (expand "count" -2)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (skosimp*)
                (("2" (case "i!2<=l!1")
                  (("1" (rewrite "count_nondecreasing") nil nil)
                   ("2" (inst?)
                    (("1" (assert) nil nil) ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((count_tail_false formula-decl nil counts nil)
    (count_nondecreasing formula-decl nil counts nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (i!2 skolem-const-decl "nat" counts nil)
    (nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (l!1 skolem-const-decl "nat" counts nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth_helper_set const-decl "set[nat]" counts nil)
    (empty? const-decl "bool" sets nil)
    (below_card? const-decl "bool" counts nil)
    (<= const-decl "bool" reals nil) (count def-decl "nat" counts nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   778 710 t shostak))
 (nth_def 0
  (nth_def-1 nil 3302177031 3302185202
   ("" (skosimp*)
    (("" (expand "below_card?")
      (("" (expand "nonempty?")
        (("" (expand "empty?")
          (("" (expand "member")
            (("" (expand "nth_helper_set")
              (("" (case-replace "l!1=0")
                (("1" (expand "count" -2) (("1" (assert) nil nil)) nil)
                 ("2" (inst - "l!1-1")
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((below_card? const-decl "bool" counts nil)
    (empty? const-decl "bool" sets nil)
    (nth_helper_set const-decl "set[nat]" counts nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (l!1 skolem-const-decl "nat" counts nil)
    (count def-decl "nat" counts nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   488 450 t shostak))
 (count_nth_TCC1 0
  (count_nth_TCC1-1 nil 3302184577 3302185202
   ("" (skosimp*)
    (("" (lemma "nth_def") (("" (inst?) (("" (assert) nil nil)) nil))
      nil))
    nil)
   proved
   ((nth_def formula-decl nil counts nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   67 60 t shostak))
 (count_nth 0
  (count_nth-1 nil 3302184718 3302185203
   ("" (skosimp*)
    (("" (lemma "nth_def")
      (("" (inst?)
        (("" (assert)
          (("" (lemma "count_nth_prop") (("" (inst?) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((nth_def formula-decl nil counts nil)
    (below_card type-eq-decl nil counts nil)
    (below_card? const-decl "bool" counts nil)
    (count_nth_prop formula-decl nil counts nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   147 140 t shostak))
 (nth_below 0
  (nth_below-1 nil 3302177155 3302185203
   ("" (skosimp*)
    (("" (lemma "count_nondecreasing")
      (("" (inst - "S!1" "l!1" "nth(S!1)(n!1)")
        (("1" (lemma "count_nth")
          (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
         ("2" (hide 2)
          (("2" (lemma "nth_def")
            (("2" (inst - "S!1" "l!1" "n!1") (("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((count_nondecreasing formula-decl nil counts nil)
    (nth_def formula-decl nil counts nil)
    (count_nth formula-decl nil counts nil)
    (nth const-decl "nat" counts nil)
    (below_card type-eq-decl nil counts nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (below_card? const-decl "bool" counts nil)
    (S!1 skolem-const-decl "set[nat]" counts nil)
    (n!1 skolem-const-decl "nat" counts nil))
   153 140 t shostak))
 (nth_eq_TCC1 0
  (nth_eq_TCC1-1 nil 3302177701 3302185203 ("" (subtype-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (set type-eq-decl nil sets nil)
    (count def-decl "nat" counts nil)
    (below type-eq-decl nil naturalnumbers nil)
    (equal_prefix const-decl "bool" counts nil)
    (nth_helper_set const-decl "set[nat]" counts nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (below_card? const-decl "bool" counts nil))
   721 690 nil shostak))
 (nth_eq_TCC2 0
  (nth_eq_TCC2-2 nil 3302185388 3302185395
   ("" (skosimp*)
    (("" (typepred "n!1")
      (("" (lemma "nth_def")
        (("" (inst - "S1!1" "l!1" "n!1")
          (("" (assert)
            (("" (lemma "count_eq")
              (("" (inst - "S!1" "S1!1" "l!1") (("" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((nth_def formula-decl nil counts nil)
    (count_eq formula-decl nil counts nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil) (count def-decl "nat" counts nil)
    (below type-eq-decl nil naturalnumbers nil))
   4705 120 nil nil)
  (nth_eq_TCC2-1 nil 3302177702 3302185374
   ("" (skosimp*)
    (("" (typepred "n!1")
      (("" (lemma "nth_def")
        (("" (inst - "S1!1" "k!1" "n!1")
          (("" (assert)
            (("" (lemma "count_eq")
              (("" (inst - "S!1" "S1!1" "k!1") (("" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((below type-eq-decl nil naturalnumbers nil)
    (count def-decl "nat" counts nil) (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (count_eq formula-decl nil counts nil)
    (nth_def formula-decl nil counts nil))
   45398 600 t shostak))
 (nth_eq 0
  (nth_eq-1 nil 3302178441 3302185205
   ("" (skosimp*)
    (("" (case "nth(S1!1)(count(nth(S!1)(n!1),S!1))=nth(S1!1)(n!1)")
      (("1" (lemma "count_eq")
        (("1" (inst - "S!1" "S1!1" "nth(S!1)(n!1)")
          (("1" (split)
            (("1" (replace -1)
              (("1" (hide -1)
                (("1" (rewrite "nth_count")
                  (("1" (hide -1 2)
                    (("1" (expand "equal_prefix")
                      (("1" (inst - "nth(S!1)(n!1)")
                        (("1" (assert) nil nil)
                         ("2" (hide 2)
                          (("2" (typepred "n!1")
                            (("2" (rewrite "nth_below") nil nil)) nil))
                          nil)
                         ("3" (typepred "n!1")
                          (("3" (lemma "nth_def")
                            (("3" (inst?) (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2 -1)
              (("2" (lemma "equal_prefix_nonincrease")
                (("2" (inst - "S!1" "S1!1" "nth(S!1)(n!1)" "l!1")
                  (("1" (assert)
                    (("1" (hide -1 2)
                      (("1" (lemma "nth_below")
                        (("1" (inst - "S!1" "l!1" "n!1")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 2)
                    (("2" (lemma "nth_def")
                      (("2" (inst?)
                        (("2" (typepred "n!1")
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide - 2)
            (("2" (typepred "n!1")
              (("2" (lemma "nth_def")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "count_nth")
        (("2" (inst?)
          (("2" (inst - "l!1")
            (("2" (split)
              (("1" (replace -1) (("1" (propax) nil nil)) nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide -1 2)
        (("3" (typepred "n!1")
          (("3" (lemma "nth_def")
            (("3" (inst - "S1!1" "l!1" "n!1")
              (("3" (assert)
                (("3" (hide 2)
                  (("3" (reveal -2)
                    (("3" (lemma "count_eq")
                      (("3" (inst - "S!1" "S1!1" "l!1")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (hide 2)
        (("4" (hide -1)
          (("4" (typepred "n!1")
            (("4" (lemma "nth_def")
              (("4" (inst - "S1!1" "l!1" "n!1")
                (("4" (assert)
                  (("4" (reveal -2)
                    (("4" (lemma "count_eq")
                      (("4" (inst - "S!1" "S1!1" "l!1")
                        (("4" (assert)
                          (("4" (lemma "count_nth")
                            (("4" (inst?) (("4" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (hide 2 -1)
        (("5" (typepred "n!1")
          (("5" (lemma "nth_def")
            (("5" (inst?) (("5" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (count def-decl "nat" counts nil)
    (nth const-decl "nat" counts nil)
    (below_card type-eq-decl nil counts nil)
    (below_card? const-decl "bool" counts nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (S!1 skolem-const-decl "set[nat]" counts nil)
    (l!1 skolem-const-decl "nat" counts nil)
    (n!1 skolem-const-decl "below(count(l!1, S!1))" counts nil)
    (equal_prefix_nonincrease formula-decl nil counts nil)
    (nth_count formula-decl nil counts nil)
    (equal_prefix const-decl "bool" counts nil)
    (nth_def formula-decl nil counts nil)
    (nth_below formula-decl nil counts nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (count_eq formula-decl nil counts nil)
    (count_nth formula-decl nil counts nil))
   896 820 t shostak)))

