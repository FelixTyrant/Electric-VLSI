(traces
 (empty_trace_TCC1 0
  (empty_trace_TCC1-1 nil 3301290301 3302254702
   ("" (inst + "empty_seq") (("" (grind) nil nil)) nil) proved-complete
   ((empty_seq const-decl "finseq" finite_sequences nil)) 182 150 t
   shostak))
 (o_empty 0
  (o_empty-1 nil 3301310371 3302271387
   ("" (skosimp*)
    (("" (expand "o")
      (("" (typepred "empty_trace")
        (("" (apply-extensionality)
          (("1" (hide 2) (("1" (apply-extensionality) nil nil)) nil)
           ("2" (hide 2) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((O const-decl "finseq" finite_sequences nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (t!1 skolem-const-decl "trace" traces nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil traces nil)
    (trace type-eq-decl nil traces nil)
    (empty_trace const-decl "{t | t`length = 0}" traces nil))
   2130 1280 t shostak))
 (empty_o 0
  (empty_o-1 nil 3301310471 3302271388
   ("" (skosimp*)
    (("" (expand "o")
      (("" (typepred "empty_trace")
        (("" (apply-extensionality)
          (("1" (hide 2) (("1" (apply-extensionality) nil nil)) nil)
           ("2" (hide 2) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((O const-decl "finseq" finite_sequences nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (t!1 skolem-const-decl "trace" traces nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil traces nil)
    (trace type-eq-decl nil traces nil)
    (empty_trace const-decl "{t | t`length = 0}" traces nil))
   1125 1050 t shostak))
 (trace1_TCC1 0
  (trace1_TCC1-1 nil 3301289915 3302254702 ("" (subtype-tcc) nil nil)
   proved-complete nil 133 100 nil shostak))
 (trace1_TCC2 0
  (trace1_TCC2-1 nil 3301289915 3302254702
   (""
    (inst +
     "lambda (a:T) : (# length := 1, seq := (lambda (i: below(1)): a) #)")
    (("" (skosimp*)
      (("" (expand "finseq_appl") (("" (propax) nil nil)) nil)) nil))
    nil)
   proved-complete
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   29 30 t shostak))
 (length_zero 0
  (length_zero-1 nil 3301286606 3302271389
   ("" (grind)
    (("" (apply-extensionality)
      (("1" (hide -1 2)
        (("1" (apply-extensionality) (("1" (skosimp*) nil nil)) nil))
        nil)
       ("2" (skosimp*) nil nil))
      nil))
    nil)
   proved
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil traces nil)
    (trace type-eq-decl nil traces nil)
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (< const-decl "bool" reals nil)
    (empty_trace const-decl "{t | t`length = 0}" traces nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   409 370 t shostak))
 (length_one 0
  (length_one-1 nil 3301298372 3302271389
   ("" (skosimp*)
    (("" (expand "trace1")
      (("" (apply-extensionality)
        (("" (hide 2)
          (("" (apply-extensionality)
            (("1" (hide 2)
              (("1" (expand "finseq_appl") (("1" (grind) nil nil))
                nil))
              nil)
             ("2" (hide 2) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((trace1 const-decl "{t | t`length = 1 & finseq_appl[T](t)(0) = a}"
     traces nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (t!1 skolem-const-decl "trace" traces nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (trace type-eq-decl nil traces nil)
    (T formal-type-decl nil traces nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   437 410 t shostak))
 (injective_trace1 0
  (injective_trace1-1 nil 3301299826 3302271389
   ("" (skosimp*)
    (("" (typepred "trace1(a!1)")
      (("" (typepred "trace1(b!1)")
        (("" (hide -1 -3)
          (("" (expand "finseq_appl") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((trace1 const-decl "{t | t`length = 1 & finseq_appl[T](t)(0) = a}"
     traces nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (trace type-eq-decl nil traces nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil traces nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   102 70 t shostak))
 (add_TCC1 0
  (add_TCC1-1 nil 3301302832 3302254702 ("" (subtype-tcc) nil nil)
   proved-complete nil 55 20 nil shostak))
 (add_elem_TCC1 0
  (add_elem_TCC1-1 nil 3301804998 3302254703 ("" (subtype-tcc) nil nil)
   proved-complete
   ((add const-decl "{t1 | t1`length = t`length + 1}" traces nil)) 53
   40 nil shostak))
 (add_elem 0
  (add_elem-1 nil 3301805096 3302271390
   ("" (skosimp*)
    (("" (expand "finseq_appl")
      (("" (expand "add") (("" (propax) nil nil)) nil)) nil))
    nil)
   proved
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (add const-decl "{t1 | t1`length = t`length + 1}" traces nil))
   85 80 t shostak))
 (add_elem_length_TCC1 0
  (add_elem_length_TCC1-1 nil 3301806249 3302254703
   ("" (grind) nil nil) proved-complete
   ((add const-decl "{t1 | t1`length = t`length + 1}" traces nil)) 50
   50 t shostak))
 (add_elem_length 0
  (add_elem_length-1 nil 3301805800 3302271390 ("" (grind) nil nil)
   proved
   ((add const-decl "{t1 | t1`length = t`length + 1}" traces nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   110 80 t shostak))
 (add_o 0
  (add_o-1 nil 3301311886 3302271390
   ("" (expand "trace1")
    (("" (expand "o")
      (("" (expand "add")
        (("" (skosimp*)
          (("" (expand "finseq_appl") (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((O const-decl "finseq" finite_sequences nil)
    (add const-decl "{t1 | t1`length = t`length + 1}" traces nil)
    (trace1 const-decl "{t | t`length = 1 & finseq_appl[T](t)(0) = a}"
     traces nil))
   333 320 t shostak))
 (o_add 0
  (o_add-1 nil 3301807083 3302271390
   ("" (skosimp*)
    (("" (rewrite "add_o")
      (("" (rewrite "add_o") (("" (rewrite "o_assoc") nil nil)) nil))
      nil))
    nil)
   proved
   ((add_o formula-decl nil traces nil)
    (T formal-type-decl nil traces nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (trace type-eq-decl nil traces nil)
    (o_assoc formula-decl nil finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (trace1 const-decl "{t | t`length = 1 & finseq_appl[T](t)(0) = a}"
     traces nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil))
   180 140 t shostak))
 (prefix_TCC1 0
  (prefix_TCC1-1 nil 3301288900 3302254703 ("" (subtype-tcc) nil nil)
   proved-complete nil 29 30 nil shostak))
 (prefix_elem_TCC1 0
  (prefix_elem_TCC1-1 nil 3301804998 3302254703
   ("" (subtype-tcc) (("" (postpone) nil nil)) nil) proved-complete
   ((prefix const-decl "{t1 | t1`length = n}" traces nil)) 73 50 nil
   shostak))
 (prefix_elem 0
  (prefix_elem-1 nil 3301804798 3302271390 ("" (grind) nil nil) proved
   ((prefix const-decl "{t1 | t1`length = n}" traces nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   89 70 t shostak))
 (prefix_zero_TCC1 0
  (prefix_zero_TCC1-1 nil 3301804998 3302254703
   ("" (subtype-tcc) nil nil) proved-complete nil 42 40 nil shostak))
 (prefix_zero 0
  (prefix_zero-1 nil 3301804816 3302271391
   ("" (grind)
    (("" (apply-extensionality)
      (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
    nil)
   proved
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil traces nil)
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (TRUE const-decl "bool" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (trace type-eq-decl nil traces nil)
    (t!1 skolem-const-decl "trace" traces nil)
    (empty_trace const-decl "{t | t`length = 0}" traces nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (prefix const-decl "{t1 | t1`length = n}" traces nil))
   443 420 t shostak))
 (prefix_full_TCC1 0
  (prefix_full_TCC1-1 nil 3301843336 3302254703
   ("" (subtype-tcc) nil nil) proved-complete nil 12 10 nil shostak))
 (prefix_full 0
  (prefix_full-1 nil 3301844114 3302271391
   ("" (skosimp*)
    (("" (expand "prefix")
      (("" (apply-extensionality)
        (("" (hide 2) (("" (apply-extensionality) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((prefix const-decl "{t1 | t1`length = n}" traces nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (trace type-eq-decl nil traces nil)
    (T formal-type-decl nil traces nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   190 150 t shostak))
 (prefix_next_TCC1 0
  (prefix_next_TCC1-1 nil 3301805642 3302254703
   ("" (subtype-tcc) nil nil) proved-complete nil 29 30 nil shostak))
 (prefix_next_TCC2 0
  (prefix_next_TCC2-1 nil 3301805642 3302254703
   ("" (subtype-tcc) nil nil) proved-complete nil 20 20 nil shostak))
 (prefix_next 0
  (prefix_next-1 nil 3301805693 3302271392
   ("" (skosimp*)
    (("" (expand "prefix")
      (("" (expand "add")
        (("" (apply-extensionality)
          (("" (hide 2)
            (("" (lift-if) (("" (prop) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((prefix const-decl "{t1 | t1`length = n}" traces nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil traces nil)
    (trace type-eq-decl nil traces nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (add const-decl "{t1 | t1`length = t`length + 1}" traces nil))
   477 410 t shostak))
 (last_TCC1 0
  (last_TCC1-1 nil 3301481600 3302254703 ("" (subtype-tcc) nil nil)
   proved-complete nil 19 20 nil shostak))
 (prefix_TCC2 0
  (prefix_TCC2-1 nil 3301303545 3302254703 ("" (subtype-tcc) nil nil)
   proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   18 20 nil shostak))
 (prefix_TCC3 0
  (prefix_TCC3-1 nil 3301804999 3302254703 ("" (subtype-tcc) nil nil)
   proved-complete nil 24 10 nil shostak))
 (prefix_add_TCC1 0
  (prefix_add_TCC1-1 nil 3301490331 3302254703
   ("" (subtype-tcc) nil nil) proved-complete
   ((add const-decl "{t1 | t1`length = t`length + 1}" traces nil)) 464
   430 nil shostak))
 (prefix_add 0
  (prefix_add-1 nil 3301307128 3302271393
   ("" (skosimp*)
    (("" (expand "prefix")
      (("" (expand "add")
        (("" (apply-extensionality)
          (("1" (hide 2)
            (("1" (apply-extensionality)
              (("1" (hide 2)
                (("1" (expand "finseq_appl")
                  (("1" (typepred "x!1")
                    (("1" (case "x!1 < t!1`length")
                      (("1" (assert) nil nil)
                       ("2" (hide 2)
                        (("2" (expand "add") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((prefix const-decl "{t | t`length = nt`length - 1}" traces nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil traces nil)
    (trace type-eq-decl nil traces nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (t!1 skolem-const-decl "trace" traces nil)
    (a!1 skolem-const-decl "T" traces nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (add const-decl "{t1 | t1`length = t`length + 1}" traces nil))
   819 770 t shostak))
 (last_add 0
  (last_add-1 nil 3301490535 3302271393
   ("" (skosimp*)
    (("" (expand "add")
      (("" (expand "last") (("" (propax) nil nil)) nil)) nil))
    nil)
   proved
   ((add const-decl "{t1 | t1`length = t`length + 1}" traces nil)
    (last const-decl "T" traces nil))
   71 50 t shostak))
 (add_prefix_last 0
  (add_prefix_last-2 nil 3301804401 3302271394
   ("" (skosimp*)
    (("" (expand "add")
      (("" (expand "last")
        (("" (expand "prefix")
          (("" (apply-extensionality)
            (("1" (hide 2)
              (("1" (apply-extensionality)
                (("1" (hide 2)
                  (("1" (lift-if)
                    (("1" (typepred "x!1")
                      (("1" (expand "prefix") (("1" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (hide 2) (("2" (grind) nil nil)) nil)
             ("3" (hide 2) (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((add const-decl "{t1 | t1`length = t`length + 1}" traces nil)
    (prefix const-decl "{t | t`length = nt`length - 1}" traces nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nt!1 skolem-const-decl "nonempty_trace" traces nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty_trace type-eq-decl nil traces nil)
    (> const-decl "bool" reals nil) (trace type-eq-decl nil traces nil)
    (T formal-type-decl nil traces nil)
    (below type-eq-decl nil nat_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (last const-decl "T" traces nil))
   1751 1640 nil nil)
  (add_prefix_last-1 nil 3301490577 3301804251
   ("" (skosimp*)
    (("" (expand "add")
      (("" (expand "last")
        (("" (expand "prefix")
          (("" (apply-extensionality)
            (("1" (hide 2)
              (("1" (apply-extensionality)
                (("1" (hide 2)
                  (("1" (lift-if)
                    (("1" (expand "finseq_appl")
                      (("1" (typepred "x!1")
                        (("1" (expand "prefix") (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((add const-decl "{t1 | t1`length = t`length + 1}" traces nil)
    (prefix const-decl "{t | t`length = nt`length - 1}" traces nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty_trace type-eq-decl nil traces nil)
    (> const-decl "bool" reals nil) (trace type-eq-decl nil traces nil)
    (T formal-type-decl nil traces nil)
    (below type-eq-decl nil nat_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (last const-decl "T" traces nil))
   86871 1340 t shostak))
 (add_induction 0
  (add_induction-1 nil 3301306046 3302271396
   ("" (skosimp*)
    (("" (case "FORALL (n: upto(t!1`length)): P!1(prefix(t!1,n))")
      (("1" (hide -2 -3)
        (("1" (inst - "t!1`length")
          (("1" (rewrite "prefix_full") nil nil)) nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "n")
          (("1" (rewrite "prefix_zero") nil nil)
           ("2" (skosimp*)
            (("2" (inst -4 "prefix(t!1,jt!1)" "t!1`seq(jt!1)")
              (("2" (assert)
                (("2" (hide -2 -3)
                  (("2" (rewrite "prefix_next") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((prefix const-decl "{t1 | t1`length = n}" traces nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (trace type-eq-decl nil traces nil)
    (T formal-type-decl nil traces nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (prefix_full formula-decl nil traces nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (prefix_zero formula-decl nil traces nil)
    (< const-decl "bool" reals nil)
    (t!1 skolem-const-decl "trace" traces nil)
    (jt!1 skolem-const-decl "upto(length(t!1))" traces nil)
    (prefix_next formula-decl nil traces nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   1127 970 t shostak))
 (indices_set_empty 0
  (indices_set_empty-1 nil 3302171307 3302271396
   ("" (grind)
    (("" (apply-extensionality)
      (("" (hide 2) (("" (grind) nil nil)) nil)) nil))
    nil)
   proved
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (indices_set const-decl "bool" traces nil)
    (setof type-eq-decl nil defined_types nil)
    (trace type-eq-decl nil traces nil)
    (FALSE const-decl "bool" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil traces nil)
    (TRUE const-decl "bool" booleans nil)
    (empty_trace const-decl "{t | t`length = 0}" traces nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   262 230 t shostak))
 (indices_set_prefix 0
  (indices_set_prefix-1 nil 3302175974 3302271396
   ("" (skosimp*) (("" (grind) nil nil)) nil) proved
   ((equal_prefix const-decl "bool" counts nil)
    (indices_set const-decl "bool" traces nil)
    (prefix const-decl "{t1 | t1`length = n}" traces nil))
   111 90 t shostak))
 (indices_set_add_equal_prefix 0
  (indices_set_add_equal_prefix-1 nil 3302173287 3302271396
   ("" (skosimp*)
    (("" (expand "indices_set")
      (("" (expand "add")
        (("" (expand "equal_prefix") (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((indices_set const-decl "bool" traces nil)
    (equal_prefix const-decl "bool" counts nil)
    (add const-decl "{t1 | t1`length = t`length + 1}" traces nil))
   222 200 t shostak))
 (indices_set_add_last 0
  (indices_set_add_last-1 nil 3302173411 3302271396
   ("" (skosimp*)
    (("" (expand "add")
      (("" (expand "indices_set") (("" (propax) nil nil)) nil)) nil))
    nil)
   proved
   ((add const-decl "{t1 | t1`length = t`length + 1}" traces nil)
    (indices_set const-decl "bool" traces nil))
   94 70 t shostak))
 (count_add 0
  (count_add-2 nil 3302005897 3302271398
   ("" (skosimp*)
    (("" (expand "count")
      (("" (lemma "indices_set_add_equal_prefix")
        (("" (inst - "A!1" "a!1" "t!1")
          (("" (expand "add" + 1)
            (("" (expand "count" + 1)
              (("" (lift-if)
                (("" (split)
                  (("1" (assert) nil nil)
                   ("2" (flatten)
                    (("2" (hide 1)
                      (("2" (lemma "count_eq")
                        (("2"
                          (inst - "indices_set(add(t!1, a!1), A!1)"
                           "indices_set(t!1, A!1)" "t!1`length")
                          (("2" (assert)
                            (("2" (replace -1)
                              (("2"
                                (assert)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (rewrite "indices_set_add_last")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((count const-decl "upto(t`length)" traces nil)
    (T formal-type-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (trace type-eq-decl nil traces nil)
    (count def-decl "nat" counts nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (set type-eq-decl nil sets nil)
    (indices_set const-decl "bool" traces nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (indices_set_add_last formula-decl nil traces nil)
    (count_eq formula-decl nil counts nil)
    (add const-decl "{t1 | t1`length = t`length + 1}" traces nil)
    (indices_set_add_equal_prefix formula-decl nil traces nil))
   1645 1570 t nil)
  (count_add-1 nil 3302004475 3302004840
   ("" (skosimp*)
    (("" (expand "add")
      (("" (expand "count")
        (("" (expand "count" + 1)
          (("" (expand "restrict")
            (("" (lift-if)
              (("" (assert)
                (("" (assert)
                  ((""
                    (case-replace
                     "(LAMBDA (s: below(t!1`length)): t!1`seq(s))=t!1`seq")
                    (("" (hide 2) (("" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((add const-decl "{t1 | t1`length = t`length + 1}" traces nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (trace type-eq-decl nil traces nil)
    (T formal-type-decl nil traces nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (restrict const-decl "R" restrict nil))
   365182 3880 t shostak))
 (count_add_true 0
  (count_add_true-1 nil 3302004847 3302271399
   ("" (skosimp*)
    (("" (rewrite "count_add")
      (("" (expand "b2n") (("" (assert) nil nil)) nil)) nil))
    nil)
   proved
   ((count_add formula-decl nil traces nil)
    (T formal-type-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (trace type-eq-decl nil traces nil)
    (b2n const-decl "nbit" bit nil))
   745 720 t shostak))
 (count_add_false 0
  (count_add_false-1 nil 3302004871 3302271400
   ("" (skosimp*)
    (("" (rewrite "count_add")
      (("" (expand "b2n") (("" (assert) nil nil)) nil)) nil))
    nil)
   proved
   ((count_add formula-decl nil traces nil)
    (T formal-type-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (trace type-eq-decl nil traces nil)
    (b2n const-decl "nbit" bit nil))
   740 710 t shostak))
 (count_exists 0
  (count_exists-1 nil 3302173774 3302271400
   ("" (skosimp*)
    (("" (lemma "counts.count_exists")
      (("" (expand "count" +)
        (("" (inst?)
          (("" (replace -1)
            (("" (hide -1)
              (("" (expand "indices_set")
                (("" (iff)
                  (("" (prop)
                    (("1" (skosimp*) (("1" (inst?) nil nil)) nil)
                     ("2" (skosimp*)
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((count_exists formula-decl nil counts nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil traces nil)
    (trace type-eq-decl nil traces nil)
    (setof type-eq-decl nil defined_types nil)
    (indices_set const-decl "bool" traces nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (i!1 skolem-const-decl "nat" traces nil)
    (t!1 skolem-const-decl "trace" traces nil)
    (count const-decl "upto(t`length)" traces nil))
   211 180 t shostak))
 (count_forall 0
  (count_forall-1 nil 3302174037 3302271400
   ("" (skosimp*)
    (("" (lemma "counts.count_forall")
      (("" (expand "count" +)
        (("" (inst?)
          (("" (replace -1)
            (("" (hide -1)
              (("" (iff)
                (("" (prop)
                  (("1" (skosimp*)
                    (("1" (inst?) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (skosimp*)
                    (("2" (inst?) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((count_forall formula-decl nil counts nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil traces nil)
    (trace type-eq-decl nil traces nil)
    (setof type-eq-decl nil defined_types nil)
    (indices_set const-decl "bool" traces nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (i!1 skolem-const-decl "nat" traces nil)
    (t!1 skolem-const-decl "trace" traces nil)
    (count const-decl "upto(t`length)" traces nil))
   232 210 t shostak))
 (nth_index_TCC1 0
  (nth_index_TCC1-2 nil 3302004166 3302254704
   ("" (skosimp*)
    (("" (lemma "below_card_def")
      (("" (inst - "indices_set(t!1, A!1)" "n!1" "t!1`length")
        (("" (prop)
          (("1" (typepred "n!1")
            (("1" (expand "count" -1) (("1" (assert) nil nil)) nil))
            nil)
           ("2" (hide 2) (("2" (skosimp*) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((below_card_def formula-decl nil counts nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (count const-decl "upto(t`length)" traces nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (indices_set const-decl "bool" traces nil)
    (setof type-eq-decl nil defined_types nil)
    (trace type-eq-decl nil traces nil)
    (T formal-type-decl nil traces nil)
    (below type-eq-decl nil nat_types nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   172 140 t nil)
  (nth_index_TCC1-1 nil 3301817977 3302004148
   ("" (skosimp*)
    (("" (expand "nonempty?")
      (("" (expand "empty?")
        (("" (inst - "t!1`length-1")
          (("1" (expand "member")
            (("1" (expand "nth_index_helper")
              (("1" (expand "count_cumulative")
                (("1" (rewrite "prefix_full") (("1" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "n!1")
            (("2" (case "t!1`length=0")
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((empty? const-decl "bool" sets nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (setof type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member const-decl "bool" sets nil)
    (prefix_full formula-decl nil traces nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil traces nil)
    (trace type-eq-decl nil traces nil)
    (nonempty? const-decl "bool" sets nil))
   237334 3130 t shostak))
 (nth_index_TCC2 0
  (nth_index_TCC2-1 nil 3302174345 3302254705
   ("" (subtype-tcc)
    (("" (typepred "min(nth_helper_set(indices_set(t!1, A!1), n!1))")
      (("1" (inst -2 "t!1`length-1") (("1" (assert) nil nil)) nil)
       ("2" (hide 1)
        (("2" (case-replace "t!1`length=0")
          (("1" (expand "count" -3) (("1" (assert) nil nil)) nil)
           ("2" (inst - "t!1`length-1") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
         min_nat nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil)
    (indices_set const-decl "bool" traces nil)
    (nth_helper_set const-decl "set[nat]" counts nil)
    (set type-eq-decl nil sets nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (count def-decl "nat" counts nil) (> const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil traces nil)
    (trace type-eq-decl nil traces nil)
    (setof type-eq-decl nil defined_types nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (count const-decl "upto(t`length)" traces nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth const-decl "nat" counts nil))
   1281 1190 t shostak))
 (count_prefix_TCC1 0
  (count_prefix_TCC1-1 nil 3302187160 3302187481
   ("" (skosimp*)
    (("" (expand "count")
      (("" (expand "prefix" + 1)
        (("" (lemma "indices_set_prefix")
          (("" (inst?)
            (("" (lemma "count_eq")
              (("" (inst?)
                (("" (assert)
                  (("" (replace -1)
                    (("" (hide -)
                      (("" (rewrite "count_nondecreasing") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((count const-decl "upto(t`length)" traces nil)
    (indices_set_prefix formula-decl nil traces nil)
    (count_eq formula-decl nil counts nil)
    (count_nondecreasing formula-decl nil counts nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (indices_set const-decl "bool" traces nil)
    (set type-eq-decl nil sets nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (trace type-eq-decl nil traces nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil traces nil)
    (prefix const-decl "{t1 | t1`length = n}" traces nil))
   196597 2430 t shostak))
 (count_prefix_next_TCC1 0
  (count_prefix_next_TCC1-1 nil 3302187160 3302254705
   ("" (subtype-tcc) nil nil) proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   456 400 nil shostak))
 (count_prefix_next_TCC2 0
  (count_prefix_next_TCC2-1 nil 3302187161 3302254706
   ("" (subtype-tcc) nil nil) proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   101 80 nil shostak))
 (count_prefix_next 0
  (count_prefix_next-1 nil 3302187500 3302271402
   ("" (skosimp*)
    (("" (expand "count_prefix")
      (("" (rewrite "prefix_next") (("" (rewrite "count_add") nil nil))
        nil))
      nil))
    nil)
   proved
   ((count_prefix const-decl "upto(count(t, A))" traces nil)
    (prefix const-decl "{t1 | t1`length = n}" traces nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (setof type-eq-decl nil defined_types nil)
    (count_add formula-decl nil traces nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trace type-eq-decl nil traces nil)
    (T formal-type-decl nil traces nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prefix_next formula-decl nil traces nil))
   1344 1310 t shostak))
 (count_prefix_next_true 0
  (count_prefix_next_true-1 nil 3302187665 3302271403
   ("" (skosimp*)
    (("" (rewrite "count_prefix_next")
      (("" (expand "b2n") (("" (assert) nil nil)) nil)) nil))
    nil)
   proved
   ((count_prefix_next formula-decl nil traces nil)
    (T formal-type-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (trace type-eq-decl nil traces nil)
    (b2n const-decl "nbit" bit nil))
   803 770 t shostak))
 (count_prefix_next_false 0
  (count_prefix_next_false-1 nil 3302187710 3302271404
   ("" (skosimp*)
    (("" (rewrite "count_prefix_next")
      (("" (expand "b2n") (("" (assert) nil nil)) nil)) nil))
    nil)
   proved
   ((count_prefix_next formula-decl nil traces nil)
    (T formal-type-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (trace type-eq-decl nil traces nil)
    (b2n const-decl "nbit" bit nil))
   771 750 t shostak))
 (nth_add_TCC1 0
  (nth_add_TCC1-1 nil 3302257925 3302258014
   ("" (skosimp*)
    (("" (rewrite "count_add") (("" (assert) nil nil)) nil)) nil)
   proved-incomplete
   ((count_add formula-decl nil traces nil)
    (T formal-type-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (trace type-eq-decl nil traces nil))
   32255 1220 t shostak))
 (nth_add 0
  (nth_add-1 nil 3302255770 3302271404
   ("" (skosimp*)
    (("" (expand "nth")
      (("" (expand "nth_index")
        (("" (lemma "indices_set_add_equal_prefix")
          (("" (inst?)
            (("" (lemma "nth_eq")
              (("" (inst?)
                (("" (assert)
                  (("" (hide -2)
                    (("" (inst?)
                      (("1" (replace -1)
                        (("1" (hide -1)
                          (("1" (lemma "add_elem")
                            (("1" (inst?)
                              (("1"
                                (expand "finseq_appl")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (rewrite "nth_below")
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (expand "count" -)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (expand "count" -)
                                      (("2"
                                        (lemma "nth_def")
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "count" -)
                        (("2" (hide 2)
                          (("2" (reveal -2)
                            (("2" (lemma "count_eq")
                              (("2"
                                (inst
                                 -
                                 " indices_set(add(t!1, a!1), A!1)"
                                 "indices_set(t!1, A!1)"
                                 "t!1`length")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((nth const-decl "T" traces nil)
    (indices_set_add_equal_prefix formula-decl nil traces nil)
    (nth_eq formula-decl nil counts nil)
    (A!1 skolem-const-decl "setof[T]" traces nil)
    (a!1 skolem-const-decl "T" traces nil)
    (t!1 skolem-const-decl "trace" traces nil)
    (count def-decl "nat" counts nil)
    (n!1 skolem-const-decl "nat" traces nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth const-decl "nat" counts nil)
    (below_card type-eq-decl nil counts nil)
    (below_card? const-decl "bool" counts nil)
    (nth_below formula-decl nil counts nil)
    (count const-decl "upto(t`length)" traces nil)
    (nth_def formula-decl nil counts nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (add_elem formula-decl nil traces nil)
    (count_eq formula-decl nil counts nil)
    (add const-decl "{t1 | t1`length = t`length + 1}" traces nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (indices_set const-decl "bool" traces nil)
    (set type-eq-decl nil sets nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (trace type-eq-decl nil traces nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil traces nil)
    (nth_index const-decl "below(t`length)" traces nil))
   655 600 t shostak))
 (nth_add_true_TCC1 0
  (nth_add_true_TCC1-1 nil 3302257925 3302258055
   ("" (skosimp*)
    (("" (rewrite "count_add_true") (("" (assert) nil nil)) nil)) nil)
   proved-incomplete
   ((count_add_true formula-decl nil traces nil)
    (T formal-type-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (trace type-eq-decl nil traces nil))
   28863 1180 t shostak))
 (nth_add_true 0
  (nth_add_true-1 nil 3302256813 3302271406
   ("" (skosimp*)
    (("" (expand "nth")
      (("" (expand "nth_index")
        ((""
          (case-replace
           "nth(indices_set(add(t!1, a!1), A!1))(count(t!1, A!1))=t!1`length")
          (("1" (lemma "add_elem_length")
            (("1" (expand "finseq_appl") (("1" (inst?) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (expand "count")
              (("2" (lemma "nth_count")
                (("2"
                  (inst - "indices_set(add(t!1, a!1), A!1)"
                   "t!1`length")
                  (("1" (lemma "indices_set_add_equal_prefix")
                    (("1" (inst?)
                      (("1" (lemma "count_eq")
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "add")
                      (("2" (expand "indices_set")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (lemma "nth_def")
              (("3" (inst?)
                (("3" (inst - "t!1`length+1")
                  (("3" (assert)
                    (("3" (hide 2)
                      (("3"
                        (case "count(t!1, A!1) < count(add(t!1, a!1), A!1)")
                        (("1" (expand "count" - 2)
                          (("1" (assert) nil nil)) nil)
                         ("2" (hide 2)
                          (("2" (rewrite "count_add_true")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((nth const-decl "T" traces nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (below_card? const-decl "bool" counts nil)
    (below_card type-eq-decl nil counts nil)
    (nth const-decl "nat" counts nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil traces nil)
    (trace type-eq-decl nil traces nil)
    (setof type-eq-decl nil defined_types nil)
    (indices_set const-decl "bool" traces nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (add const-decl "{t1 | t1`length = t`length + 1}" traces nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (count const-decl "upto(t`length)" traces nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (add_elem_length formula-decl nil traces nil)
    (t!1 skolem-const-decl "trace" traces nil)
    (a!1 skolem-const-decl "T" traces nil)
    (A!1 skolem-const-decl "setof[T]" traces nil)
    (count_eq formula-decl nil counts nil)
    (indices_set_add_equal_prefix formula-decl nil traces nil)
    (nth_count formula-decl nil counts nil)
    (nth_def formula-decl nil counts nil)
    (count_add_true formula-decl nil traces nil)
    (< const-decl "bool" reals nil)
    (nth_index const-decl "below(t`length)" traces nil))
   1346 1270 t shostak))
 (nth_A 0
  (nth_A-1 nil 3301844885 3302272301
   ("" (skosimp*)
    (("" (expand "nth")
      (("" (expand "nth_index")
        (("" (typepred "nth(indices_set(t!1, A!1))(n!1)")
          (("1" (expand "indices_set" - 1) (("1" (assert) nil nil))
            nil)
           ("2" (lemma "nth_def")
            (("2" (typepred "n!1")
              (("2" (expand "count" -1)
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((nth_index const-decl "below(t`length)" traces nil)
    (nth_def formula-decl nil counts nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil traces nil)
    (trace type-eq-decl nil traces nil)
    (setof type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (indices_set const-decl "bool" traces nil)
    (set type-eq-decl nil sets nil)
    (below_card? const-decl "bool" counts nil)
    (below_card type-eq-decl nil counts nil)
    (nth const-decl "nat" counts nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (count const-decl "upto(t`length)" traces nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth const-decl "T" traces nil))
   341911 3460 t shostak))
 (proj_empty 0
  (proj_empty-1 nil 3301310096 3302271406
   ("" (skosimp*)
    (("" (lemma "length_zero")
      (("" (inst - "proj(empty_trace, A!1)")
        (("" (prop)
          (("" (hide 2)
            (("" (expand "proj")
              (("" (expand "count")
                (("" (expand "empty_trace" + 1)
                  (("" (expand "empty_seq" + 1)
                    (("" (expand "count") (("" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((length_zero formula-decl nil traces nil)
    (count def-decl "nat" counts nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (count const-decl "upto(t`length)" traces nil)
    (empty_trace const-decl "{t | t`length = 0}" traces nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (proj const-decl "trace" traces nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (trace type-eq-decl nil traces nil)
    (T formal-type-decl nil traces nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   78 70 t shostak))
 (proj_add_true 0
  (proj_add_true-1 nil 3301489368 3302271408
   ("" (skosimp*)
    (("" (expand "proj")
      (("" (rewrite "count_add_true")
        (("" (expand "add" + 2)
          (("" (apply-extensionality)
            (("1" (hide 2)
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (rewrite "nth_add") nil nil)
                   ("2" (lemma "nth_add_true")
                    (("2" (inst - "A!1" "a!1" "t!1")
                      (("2" (assert)
                        (("2" (case-replace "count(t!1, A!1)=x!1")
                          (("2" (hide -1 3)
                            (("2" (typepred "x!1")
                              (("2"
                                (rewrite "count_add_true")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (rewrite "count_add_true") (("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((proj const-decl "trace" traces nil)
    (add const-decl "{t1 | t1`length = t`length + 1}" traces nil)
    (nth_add formula-decl nil traces nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth_add_true formula-decl nil traces nil)
    (a!1 skolem-const-decl "T" traces nil)
    (A!1 skolem-const-decl "setof[T]" traces nil)
    (t!1 skolem-const-decl "trace" traces nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nth const-decl "T" traces nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (count const-decl "upto(t`length)" traces nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (trace type-eq-decl nil traces nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil traces nil)
    (count_add_true formula-decl nil traces nil))
   1561 1450 t shostak))
 (proj_add_false 0
  (proj_add_false-1 nil 3301490968 3302271409
   ("" (skosimp*)
    (("" (expand "proj")
      (("" (rewrite "count_add_false")
        (("" (apply-extensionality)
          (("1" (hide 3)
            (("1" (expand "nth")
              (("1" (typepred "x!1")
                (("1" (rewrite "count_add_false")
                  (("1" (lemma "add_elem")
                    (("1" (expand "finseq_appl")
                      (("1" (inst?)
                        (("1" (replace -1)
                          (("1" (hide -1)
                            (("1"
                              (case-replace
                               "nth_index(add(t!1, a!1), A!1)(x!1)=nth_index(t!1, A!1)(x!1)")
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand "nth_index")
                                  (("1"
                                    (lemma
                                     "indices_set_add_equal_prefix")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (lemma "nth_eq")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (expand "count" -2)
                                                (("1"
                                                  (lemma "count_eq")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (hide 2)
                            (("2" (expand "nth_index")
                              (("2"
                                (expand "count")
                                (("2"
                                  (lemma
                                   "indices_set_add_equal_prefix")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (lemma "nth_eq")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst?)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (hide -1 -2)
                                                (("1"
                                                  (rewrite "nth_below")
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2 3)
                                              (("2"
                                                (lemma "count_eq")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 3)
            (("2" (rewrite "count_add_false") (("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((proj const-decl "trace" traces nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (count const-decl "upto(t`length)" traces nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (add const-decl "{t1 | t1`length = t`length + 1}" traces nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth const-decl "T" traces nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (t!1 skolem-const-decl "trace" traces nil)
    (A!1 skolem-const-decl "setof[T]" traces nil)
    (a!1 skolem-const-decl "T" traces nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (nth_below formula-decl nil counts nil)
    (indices_set const-decl "bool" traces nil)
    (set type-eq-decl nil sets nil) (count def-decl "nat" counts nil)
    (count_eq formula-decl nil counts nil)
    (nth_eq formula-decl nil counts nil)
    (indices_set_add_equal_prefix formula-decl nil traces nil)
    (x!1 skolem-const-decl "below(count(add(t!1, a!1), A!1))" traces
     nil)
    (nth_index const-decl "below(t`length)" traces nil)
    (add_elem formula-decl nil traces nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (trace type-eq-decl nil traces nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil traces nil)
    (count_add_false formula-decl nil traces nil))
   1435 1270 t shostak))
 (proj_add 0
  (proj_add-1 nil 3301311129 3302271409
   ("" (skosimp*)
    (("" (lift-if)
      (("" (prop)
        (("1" (rewrite "proj_add_true") nil nil)
         ("2" (rewrite "proj_add_false") nil nil))
        nil))
      nil))
    nil)
   proved
   ((proj_add_false formula-decl nil traces nil)
    (proj_add_true formula-decl nil traces nil)
    (T formal-type-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (trace type-eq-decl nil traces nil))
   93 80 t shostak))
 (proj_type 0
  (proj_type-1 nil 3301491435 3302271632
   ("" (skosimp*)
    (("" (ground)
      (("" (expand "finseq_appl")
        (("" (skosimp*)
          (("" (expand "proj")
            (("" (rewrite "nth_A")
              (("" (hide 2)
                (("" (typepred "i!1")
                  (("" (expand "proj") (("" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((nth_A formula-decl nil traces nil)
    (T formal-type-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (trace type-eq-decl nil traces nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (count const-decl "upto(t`length)" traces nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (proj const-decl "trace" traces nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   185426 4640 t shostak))
 (proj_twice 0
  (proj_twice-1 nil 3302260452 3302262326
   ("" (induct "t" :name "add_induction")
    (("1" (skosimp*)
      (("1" (rewrite "proj_empty")
        (("1" (rewrite "proj_empty")
          (("1" (rewrite "proj_empty") nil nil)) nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (inst?)
        (("2" (rewrite "proj_add")
          (("2" (rewrite "proj_add")
            (("2" (replace -1 :dir rl)
              (("2" (hide -1)
                (("2" (expand "intersection")
                  (("2" (expand "member")
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2" (prop)
                          (("2" (rewrite "proj_add") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil traces nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (setof type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (proj const-decl "trace" traces nil)
    (set type-eq-decl nil sets nil)
    (intersection const-decl "set" sets nil)
    (add_induction formula-decl nil traces nil)
    (proj_empty formula-decl nil traces nil)
    (member const-decl "bool" sets nil)
    (proj_add formula-decl nil traces nil))
   3153 440 t shostak))
 (proj_twice_subset 0
  (proj_twice_subset-1 nil 3302262332 3302262475
   ("" (skosimp*)
    (("" (rewrite "proj_twice")
      (("" (case-replace "intersection(A!1, B!1)=B!1")
        (("" (hide 2)
          (("" (rewrite "intersection_commutative")
            (("" (rewrite "intersection_subset2") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((proj_twice formula-decl nil traces nil)
    (T formal-type-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (trace type-eq-decl nil traces nil)
    (intersection_subset2 formula-decl nil sets_lemmas nil)
    (intersection_commutative formula-decl nil sets_lemmas nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (intersection const-decl "set" sets nil))
   142840 1200 t shostak)))
(traces_set
 (proj_TCC1 0
  (proj_TCC1-1 nil 3302261409 3302261508
   ("" (skosimp*)
    (("" (lemma "proj_type[T]")
      (("" (expand "finseq_appl") (("" (inst?) nil nil)) nil)) nil))
    nil)
   proved-complete
   ((T formal-type-decl nil traces_set nil)
    (proj_type formula-decl nil traces nil)
    (trace type-eq-decl nil traces nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (proj const-decl "trace" traces nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   82281 1290 t shostak))
 (extend_proj_subset 0
  (extend_proj_subset-1 nil 3302271767 3302271775
   ("" (skosimp*)
    (("" (rewrite "extend_proj")
      (("" (rewrite "extend_proj")
        (("" (rewrite "proj_twice_subset") nil nil)) nil))
      nil))
    nil)
   proved
   ((proj const-decl "trace" traces nil)
    (proj_twice_subset formula-decl nil traces nil)
    (pred type-eq-decl nil defined_types nil)
    (trace type-eq-decl nil traces nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil traces_set nil)
    (extend_proj const-decl "pred[trace[T]]" traces_set nil))
   5576 90 t nil)))

