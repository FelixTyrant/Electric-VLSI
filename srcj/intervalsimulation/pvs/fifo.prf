(simple_fifo
 (data_trace_empty 0
  (data_trace_empty-1 nil 3302333251 3302341328
   ("" (expand "empty_trace")
    (("" (expand "empty_seq")
      (("" (expand "data_trace") (("" (apply-extensionality) nil nil))
        nil))
      nil))
    nil)
   proved
   ((empty_seq const-decl "finseq" finite_sequences nil)
    (port type-eq-decl nil simple_fifo nil)
    (event type-eq-decl nil simple_fifo nil)
    (pred type-eq-decl nil defined_types nil)
    (epsilon const-decl "T" epsilons nil)
    (TRUE const-decl "bool" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (data nonempty-type-decl nil simple_fifo nil)
    (data_trace const-decl "trace[data]" simple_fifo nil)
    (empty_trace const-decl "{t | t`length = 0}" traces nil))
   130 90 t shostak))
 (data_trace_add 0
  (data_trace_add-1 nil 3302333465 3302341329
   ("" (skosimp*)
    (("" (expand "data_trace" + 2)
      (("" (expand "add")
        (("" (expand "data_trace") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((data_trace const-decl "trace[data]" simple_fifo nil)
    (add const-decl "{t1 | t1`length = t`length + 1}" traces nil))
   259 200 t shostak))
 (data_trace_p_empty 0
  (data_trace_p_empty-1 nil 3302333565 3302341329
   ("" (skosimp*)
    (("" (expand "empty_trace")
      (("" (expand "data_trace")
        (("" (expand "empty_seq" + 1)
          (("" (expand "proj")
            (("" (expand "count")
              (("" (expand "count")
                (("" (expand "data_trace")
                  (("" (expand "empty_seq")
                    (("" (apply-extensionality)
                      (("" (hide 2) (("" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((empty_trace const-decl "{t | t`length = 0}" traces nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (count const-decl "upto(t`length)" traces nil)
    (data_trace const-decl "trace[data]" simple_fifo nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (data nonempty-type-decl nil simple_fifo nil)
    (nth const-decl "T" traces nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (port type-eq-decl nil simple_fifo nil)
    (event type-eq-decl nil simple_fifo nil)
    (trace type-eq-decl nil traces nil)
    (setof type-eq-decl nil defined_types nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (epsilon const-decl "T" epsilons nil)
    (TRUE const-decl "bool" booleans nil)
    (N formal-const-decl "nat" simple_fifo nil)
    (port_event? const-decl "bool" simple_fifo nil)
    (p!1 skolem-const-decl "port" simple_fifo nil)
    (count def-decl "nat" counts nil)
    (proj const-decl "trace" traces nil)
    (data_trace const-decl "trace[data]" simple_fifo nil))
   722 630 t shostak))
 (data_trace_p_add_this 0
  (data_trace_p_add_this-1 nil 3302333722 3302341330
   ("" (skosimp*)
    (("" (expand "data_trace")
      (("" (expand "port_event?")
        (("" (rewrite "proj_add_true")
          (("" (rewrite "data_trace_add") nil nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((data_trace const-decl "trace[data]" simple_fifo nil)
    (proj_add_true formula-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (N formal-const-decl "nat" simple_fifo nil)
    (below type-eq-decl nil nat_types nil)
    (trace type-eq-decl nil traces nil)
    (state_opt type-decl nil simple_fifo nil)
    (Reject? adt-recognizer-decl "[state_opt -> boolean]" simple_fifo
     nil)
    (Reject adt-constructor-decl "(Reject?)" simple_fifo nil)
    (trace type-eq-decl nil fsm_def nil)
    (data nonempty-type-decl nil simple_fifo nil)
    (port type-eq-decl nil simple_fifo nil)
    (event type-eq-decl nil simple_fifo nil)
    (data_trace_add formula-decl nil simple_fifo nil)
    (proj const-decl "trace" traces nil)
    (port_event? const-decl "bool" simple_fifo nil))
   177 150 t shostak))
 (data_trace_p_add_other 0
  (data_trace_p_add_other-1 nil 3302333804 3302341330
   ("" (skosimp*)
    (("" (expand "data_trace")
      (("" (expand "port_event?")
        (("" (rewrite "proj_add_false") nil nil)) nil))
      nil))
    nil)
   proved
   ((data_trace const-decl "trace[data]" simple_fifo nil)
    (proj_add_false formula-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (N formal-const-decl "nat" simple_fifo nil)
    (below type-eq-decl nil nat_types nil)
    (trace type-eq-decl nil traces nil)
    (state_opt type-decl nil simple_fifo nil)
    (Reject? adt-recognizer-decl "[state_opt -> boolean]" simple_fifo
     nil)
    (Reject adt-constructor-decl "(Reject?)" simple_fifo nil)
    (trace type-eq-decl nil fsm_def nil)
    (data nonempty-type-decl nil simple_fifo nil)
    (port type-eq-decl nil simple_fifo nil)
    (event type-eq-decl nil simple_fifo nil)
    (port_event? const-decl "bool" simple_fifo nil))
   111 110 t shostak))
 (simple_nextstate_TCC1 0
  (simple_nextstate_TCC1-1 nil 3301668002 3302341330
   ("" (cases-tcc) nil nil) proved nil 26 30 t shostak))
 (data_in_TCC1 0
  (data_in_TCC1-1 nil 3302341330 3302341366 ("" (assert) nil nil)
   proved nil 7805 170 t shostak))
 (data_out_TCC1 0
  (data_out_TCC1-1 nil 3302341330 3302341378 ("" (assert) nil nil)
   proved nil 5577 160 t shostak))
 (simple_invariant_TCC1 0
  (simple_invariant_TCC1-1 nil 3302326405 3302341330
   ("" (skosimp*)
    (("" (case-replace "t!1`length=0")
      (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
    nil)
   proved
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (data nonempty-type-decl nil simple_fifo nil)
    (port type-eq-decl nil simple_fifo nil)
    (event type-eq-decl nil simple_fifo nil)
    (state_opt type-decl nil simple_fifo nil)
    (Reject? adt-recognizer-decl "[state_opt -> boolean]" simple_fifo
     nil)
    (Reject adt-constructor-decl "(Reject?)" simple_fifo nil)
    (trace type-eq-decl nil fsm_def nil))
   63 70 t shostak))
 (simple_invariant_TCC2 0
  (simple_invariant_TCC2-1 nil 3302332100 3302341330
   ("" (subtype-tcc) nil nil) proved
   ((even? const-decl "bool" integers nil)) 37 40 nil shostak))
 (simple_invariant_TCC3 0
  (simple_invariant_TCC3-1 nil 3302332100 3302341330
   ("" (skosimp*)
    (("" (case-replace "t!1`length=0")
      (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
    nil)
   proved
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (data nonempty-type-decl nil simple_fifo nil)
    (port type-eq-decl nil simple_fifo nil)
    (event type-eq-decl nil simple_fifo nil)
    (state_opt type-decl nil simple_fifo nil)
    (Reject? adt-recognizer-decl "[state_opt -> boolean]" simple_fifo
     nil)
    (Reject adt-constructor-decl "(Reject?)" simple_fifo nil)
    (trace type-eq-decl nil fsm_def nil))
   68 60 t shostak))
 (simple_invariant_TCC4 0
  (simple_invariant_TCC4-1 nil 3302332101 3302341330
   ("" (subtype-tcc) nil nil) proved
   ((even? const-decl "bool" integers nil)
    (last const-decl "T" traces nil))
   55 50 nil shostak))
 (simple_invariant_TCC5 0
  (simple_invariant_TCC5-1 nil 3302332101 3302341330
   ("" (subtype-tcc) nil nil) proved
   ((even? const-decl "bool" integers nil)
    (last const-decl "T" traces nil))
   52 50 nil shostak))
 (even_odd 0
  (even_odd-1 nil 3302333940 3302341331
   ("" (skosimp*)
    (("" (split)
      (("1" (assert)
        (("1" (lemma "even_or_odd")
          (("1" (inst?)
            (("1" (assert)
              (("1" (lemma "odd_plus_odd_is_even")
                (("1" (inst?) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (lemma "odd_plus_even_is_odd")
          (("2" (inst?)
            (("2" (lemma "even_or_odd")
              (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((even_or_odd formula-decl nil naturalnumbers nil)
    (odd_int nonempty-type-eq-decl nil integers nil)
    (odd? const-decl "bool" integers nil)
    (odd_plus_odd_is_even judgement-tcc nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (odd_plus_even_is_odd judgement-tcc nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (even_int nonempty-type-eq-decl nil integers nil)
    (even? const-decl "bool" integers nil))
   497 470 t shostak))
 (simple_invariant_step 0
  (simple_invariant_step-1 nil 3302334058 3302341332
   ("" (skosimp*)
    (("" (expand "simple_event?")
      (("" (expand "simple_nextstate")
        (("" (expand "simple_invariant" -)
          (("" (lemma "even_odd")
            (("" (inst - "t!1`length")
              (("" (split)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (split 2)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "simple_invariant")
                                  (("1"
                                    (rewrite "last_add")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite
                                         "data_trace_p_add_this")
                                        (("1"
                                          (rewrite
                                           "data_trace_p_add_other")
                                          (("1" (rewrite -4) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (lift-if)
                          (("2" (split 2)
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "simple_invariant")
                                    (("1"
                                      (rewrite
                                       "data_trace_p_add_other")
                                      (("1"
                                        (rewrite
                                         "data_trace_p_add_this")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -4)
                                            (("1"
                                              (beta)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((simple_event? const-decl "bool" simple_fifo nil)
    (simple_invariant const-decl "bool" simple_fifo nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (data nonempty-type-decl nil simple_fifo nil)
    (port type-eq-decl nil simple_fifo nil)
    (event type-eq-decl nil simple_fifo nil)
    (state_opt type-decl nil simple_fifo nil)
    (Reject? adt-recognizer-decl "[state_opt -> boolean]" simple_fifo
     nil)
    (Reject adt-constructor-decl "(Reject?)" simple_fifo nil)
    (trace type-eq-decl nil fsm_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (data_trace_p_add_other formula-decl nil simple_fifo nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (data_trace const-decl "trace[data]" simple_fifo nil)
    (data_trace_p_add_this formula-decl nil simple_fifo nil)
    (<= const-decl "bool" reals nil)
    (N formal-const-decl "nat" simple_fifo nil)
    (< const-decl "bool" reals nil)
    (fsm_name type-eq-decl nil simple_fifo nil)
    (last_add formula-decl nil traces nil)
    (trace type-eq-decl nil traces nil)
    (even_odd formula-decl nil simple_fifo nil)
    (simple_nextstate const-decl "state_opt" simple_fifo nil))
   1534 1400 t shostak))
 (simple_invariant_valid_TCC1 0
  (simple_invariant_valid_TCC1-1 nil 3302327277 3302341333
   ("" (subtype-tcc) nil nil) proved
   ((bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" simple_fifo nil)
    (fsm_name type-eq-decl nil simple_fifo nil)
    (below type-eq-decl nil nat_types nil)
    (trace type-eq-decl nil fsm_def nil)
    (valid_trace? const-decl "bool" simple_fifo nil)
    (valid_trace type-eq-decl nil simple_fifo nil)
    (valid_trace const-decl "bool" fsm_def nil)
    (simple_fsm const-decl "fsm" simple_fifo nil)
    (Reject adt-constructor-decl "(Reject?)" simple_fifo nil)
    (Reject? adt-recognizer-decl "[state_opt -> boolean]" simple_fifo
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (state_opt type-decl nil simple_fifo nil)
    (event type-eq-decl nil simple_fifo nil)
    (port type-eq-decl nil simple_fifo nil)
    (data nonempty-type-decl nil simple_fifo nil)
    (goto const-decl "state_opt" fsm_def nil))
   312 280 nil shostak))
 (simple_invariant_valid 0
  (simple_invariant_valid-1 nil 3302327281 3302341334
   ("" (skosimp*)
    (("" (lemma "fsm_induction")
      (("" (inst - "simple_invariant(n!1)" "simple_fsm(n!1)")
        (("" (split)
          (("1" (inst?)
            (("1" (typepred "vt!1")
              (("1" (expand "valid_trace?")
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (hide -1)
                      (("1" (expand "simple_fsm" - 1)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (expand "simple_fsm")
              (("2" (expand "simple_invariant")
                (("2" (rewrite "data_trace_p_empty")
                  (("2" (rewrite "data_trace_p_empty")
                    (("2" (expand "empty_trace")
                      (("2" (expand "empty_seq")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (skosimp*)
              (("3" (lemma "simple_invariant_step")
                (("3" (inst?)
                  (("3" (inst?)
                    (("3" (assert)
                      (("3" (expand "simple_fsm" 2)
                        (("3" (assert)
                          (("3" (split)
                            (("1" (typepred "e!1")
                              (("1"
                                (expand "simple_fsm" -1)
                                (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (expand "simple_fsm")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Reject adt-constructor-decl "(Reject?)" simple_fifo nil)
    (Reject? adt-recognizer-decl "[state_opt -> boolean]" simple_fifo
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (state_opt type-decl nil simple_fifo nil)
    (event type-eq-decl nil simple_fifo nil)
    (port type-eq-decl nil simple_fifo nil)
    (data nonempty-type-decl nil simple_fifo nil)
    (fsm_induction formula-decl nil fsm_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (valid_trace? const-decl "bool" simple_fifo nil)
    (valid_trace type-eq-decl nil simple_fifo nil)
    (<= const-decl "bool" reals nil)
    (data_trace_p_empty formula-decl nil simple_fifo nil)
    (empty_trace const-decl "{t | t`length = 0}" traces nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (simple_invariant_step formula-decl nil simple_fifo nil)
    (simple_fsm const-decl "fsm" simple_fifo nil)
    (fsm type-eq-decl nil fsm_def nil)
    (simple_invariant const-decl "bool" simple_fifo nil)
    (fsm_name type-eq-decl nil simple_fifo nil)
    (N formal-const-decl "nat" simple_fifo nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (state type-eq-decl nil fsm_def nil)
    (/= const-decl "boolean" notequal nil)
    (trace type-eq-decl nil fsm_def nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   827 730 t shostak))
 (data_port_prefix_data_in 0
  (data_port_prefix_data_in-1 nil 3302337223 3302341337
   ("" (induct "p")
    (("1" (skosimp*)
      (("1" (expand "data_in") (("1" (rewrite "prefix_full") nil nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (inst?)
        (("2" (lemma "simple_invariant_valid")
          (("2" (inst - "jt!1" "vt!1")
            (("2" (expand "simple_invariant")
              (("2"
                (case-replace
                 "data_trace(jt!1, proj(vt!1, simple_event?(jt!1))) = data_trace(jt!1, vt!1)")
                (("1"
                  (case-replace
                   "data_trace(1 + jt!1, proj(vt!1, simple_event?(jt!1)))=data_trace(1+jt!1, vt!1)")
                  (("1" (hide -1 -2)
                    (("1" (split)
                      (("1" (flatten) (("1" (assert) nil nil)) nil)
                       ("2" (flatten)
                        (("2" (hide 1 -1 -2)
                          (("2" (replace -1)
                            (("2" (expand "add" -3)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "add" -4 2)
                                  (("2"
                                    (lemma "prefix_add[data]")
                                    (("2"
                                      (inst
                                       -
                                       "last(proj(vt!1, simple_event?(jt!1)))`data"
                                       "data_trace(1 + jt!1, vt!1)")
                                      (("1"
                                        (replace -5)
                                        (("1"
                                          (hide -5)
                                          (("1"
                                            (replace -1 :dir rl)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (expand "prefix" + 4)
                                                (("1"
                                                  (expand "prefix" + 4)
                                                  (("1"
                                                    (hide -1 -3)
                                                    (("1"
                                                      (expand
                                                       "prefix"
                                                       +
                                                       2)
                                                      (("1"
                                                        (expand
                                                         "prefix")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -2 -3 -4 2)
                                        (("2"
                                          (expand "data_trace" - 1)
                                          (("2"
                                            (expand "data_trace" - 1)
                                            (("2"
                                              (case
                                               "proj(vt!1, port_event?(jt!1))`length > 0")
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (lemma
                                                   "proj_twice_subset[event]")
                                                  (("1"
                                                    (inst
                                                     -
                                                     "simple_event?(jt!1)"
                                                     "port_event?(jt!1)"
                                                     "vt!1")
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (replace

                                                         -1
                                                         :dir

                                                         rl)
                                                        (("1"
                                                          (expand
                                                           "proj"
                                                           -2
                                                           1)
                                                          (("1"
                                                            (case-replace
                                                             "proj(vt!1, simple_event?(jt!1))`length=0")
                                                            (("1"
                                                              (expand
                                                               "proj"
                                                               -2
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "count"
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   "count"
                                                                   -2)
                                                                  (("1"
                                                                    (replace

                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "count"
                                                                       -3)
                                                                      (("1"
                                                                        (expand
                                                                         "count"
                                                                         -3)
                                                                        (("1"
                                                                          (replace

                                                                           -1)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -1 2)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "add" -)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2 -2)
                    (("2" (expand "data_trace")
                      (("2" (hide -1 -3)
                        (("2" (rewrite "proj_twice_subset")
                          (("2" (hide 2) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (assert) nil nil))
                  nil)
                 ("2" (hide -1 2 -3)
                  (("2" (expand "data_trace")
                    (("2" (rewrite "proj_twice_subset")
                      (("2" (hide -1 2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((simple_invariant_valid formula-decl nil simple_fifo nil)
    (simple_invariant const-decl "bool" simple_fifo nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (add const-decl "{t1 | t1`length = t`length + 1}" traces nil)
    (> const-decl "bool" reals nil)
    (vt!1 skolem-const-decl "valid_trace" simple_fifo nil)
    (last const-decl "T" traces nil)
    (nonempty_trace type-eq-decl nil traces nil)
    (prefix const-decl "{t | t`length = nt`length - 1}" traces nil)
    (port_event? const-decl "bool" simple_fifo nil)
    (proj_twice_subset formula-decl nil traces nil)
    (count def-decl "nat" counts nil)
    (count const-decl "upto(t`length)" traces nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (data_trace const-decl "trace[data]" simple_fifo nil)
    (prefix_add formula-decl nil traces nil)
    (setof type-eq-decl nil defined_types nil)
    (proj const-decl "trace" traces nil)
    (simple_event? const-decl "bool" simple_fifo nil)
    (fsm_name type-eq-decl nil simple_fifo nil)
    (jt!1 skolem-const-decl "upto(N)" simple_fifo nil)
    (< const-decl "bool" reals nil)
    (prefix_full formula-decl nil traces nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" simple_fifo nil)
    (prefix const-decl "{t1 | t1`length = n}" traces nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (data_in const-decl "trace[data]" simple_fifo nil)
    (data_trace const-decl "trace[data]" simple_fifo nil)
    (trace type-eq-decl nil traces nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (valid_trace type-eq-decl nil simple_fifo nil)
    (valid_trace? const-decl "bool" simple_fifo nil)
    (trace type-eq-decl nil fsm_def nil)
    (Reject adt-constructor-decl "(Reject?)" simple_fifo nil)
    (Reject? adt-recognizer-decl "[state_opt -> boolean]" simple_fifo
     nil)
    (state_opt type-decl nil simple_fifo nil)
    (event type-eq-decl nil simple_fifo nil)
    (data nonempty-type-decl nil simple_fifo nil)
    (below type-eq-decl nil nat_types nil)
    (port type-eq-decl nil simple_fifo nil)
    (pred type-eq-decl nil defined_types nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil))
   3213 2970 t shostak))
 (data_out_prefix_data_in 0
  (data_out_prefix_data_in-1 nil 3302340777 3302341337
   ("" (skosimp*)
    (("" (expand "data_out")
      (("" (rewrite "data_port_prefix_data_in") nil nil)) nil))
    nil)
   proved
   ((data_out const-decl "trace[data]" simple_fifo nil)
    (valid_trace type-eq-decl nil simple_fifo nil)
    (valid_trace? const-decl "bool" simple_fifo nil)
    (trace type-eq-decl nil fsm_def nil)
    (Reject adt-constructor-decl "(Reject?)" simple_fifo nil)
    (Reject? adt-recognizer-decl "[state_opt -> boolean]" simple_fifo
     nil)
    (state_opt type-decl nil simple_fifo nil)
    (event type-eq-decl nil simple_fifo nil)
    (data nonempty-type-decl nil simple_fifo nil)
    (below type-eq-decl nil nat_types nil)
    (port type-eq-decl nil simple_fifo nil)
    (N formal-const-decl "nat" simple_fifo nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (data_port_prefix_data_in formula-decl nil simple_fifo nil))
   55 50 t shostak)))

