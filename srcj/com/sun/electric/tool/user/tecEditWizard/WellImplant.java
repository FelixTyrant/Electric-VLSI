/* -*- tab-width: 4 -*-
 *
 * Electric(tm) VLSI Design System
 *
 * File: WellImplant.java
 *
 * Copyright (c) 2008 Sun Microsystems and Static Free Software
 *
 * Electric(tm) is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * Electric(tm) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Electric(tm); see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, Mass 02111-1307, USA.
 */
package com.sun.electric.tool.user.tecEditWizard;

import com.sun.electric.database.text.TextUtils;
import com.sun.electric.tool.user.Resources;

import javax.swing.JPanel;

/**
 * Class to handle the "WellImplant" tab of the Numeric Technology Editor dialog.
 */
public class WellImplant extends TechEditWizardPanel
{
	/** Creates new form WellImplant */
	public WellImplant(TechEditWizard parent, boolean modal)
	{
		super(parent, modal);
		initComponents();
		image.setIcon(Resources.getResource(getClass(), "WellImplant.png"));
		pack();
	}

	/** return the panel to use for this Numeric Technology Editor tab. */
	public JPanel getPanel() { return wellImplant; }

	/** return the name of this Numeric Technology Editor tab. */
	public String getName() { return "WellImplant"; }

	/**
	 * Method called at the start of the dialog.
	 * Caches current values and displays them in the WellImplant tab.
	 */
	public void init()
	{
		TechEditWizardData data = getNumericData();
		nPlusWidth.setText(Double.toString(data.getNPlusWidth()));
		nPlusOverhang.setText(Double.toString(data.getNPlusOverhangDiff()));
		nPlusSpacing.setText(Double.toString(data.getNPlusSpacing()));

		pPlusWidth.setText(Double.toString(data.getPPlusWidth()));
		pPlusOverhang.setText(Double.toString(data.getPPlusOverhangDiff()));
		pPlusSpacing.setText(Double.toString(data.getPPlusSpacing()));

		nWellWidth.setText(Double.toString(data.getNWellWidth()));
		nWellOverhang.setText(Double.toString(data.getNWellOverhangDiff()));
		nWellSpacing.setText(Double.toString(data.getNWellSpacing()));
	}

	/**
	 * Method called when the "OK" panel is hit.
	 * Updates any changed fields in the WellImplant tab.
	 */
	public void term()
	{
		TechEditWizardData data = getNumericData();
		data.setNPlusWidth(TextUtils.atof(nPlusWidth.getText()));
		data.setNPlusOverhangDiff(TextUtils.atof(nPlusOverhang.getText()));
		data.setNPlusSpacing(TextUtils.atof(nPlusSpacing.getText()));

		data.setPPlusWidth(TextUtils.atof(pPlusWidth.getText()));
		data.setPPlusOverhangDiff(TextUtils.atof(pPlusOverhang.getText()));
		data.setPPlusSpacing(TextUtils.atof(pPlusSpacing.getText()));

		data.setNWellWidth(TextUtils.atof(nWellWidth.getText()));
		data.setNWellOverhangDiff(TextUtils.atof(nWellOverhang.getText()));
		data.setNWellSpacing(TextUtils.atof(nWellSpacing.getText()));
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        wellImplant = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nPlusWidth = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        nPlusOverhang = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        nPlusSpacing = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        pPlusWidth = new javax.swing.JTextField();
        image = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        pPlusOverhang = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        pPlusSpacing = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        nWellWidth = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        nWellOverhang = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        nWellSpacing = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle("Well-Implant");
        setName("");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        wellImplant.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("NPlus width (A):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        wellImplant.add(jLabel1, gridBagConstraints);

        nPlusWidth.setColumns(8);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 2);
        wellImplant.add(nPlusWidth, gridBagConstraints);

        jLabel2.setText("NPlus active overhang (B):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        wellImplant.add(jLabel2, gridBagConstraints);

        nPlusOverhang.setColumns(8);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 2);
        wellImplant.add(nPlusOverhang, gridBagConstraints);

        jLabel3.setText("NPlus spacing (C):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 4, 0);
        wellImplant.add(jLabel3, gridBagConstraints);

        nPlusSpacing.setColumns(8);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 4, 2);
        wellImplant.add(nPlusSpacing, gridBagConstraints);

        jLabel4.setText("PPlus width (D):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 1, 0);
        wellImplant.add(jLabel4, gridBagConstraints);

        pPlusWidth.setColumns(8);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 1, 2);
        wellImplant.add(pPlusWidth, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        wellImplant.add(image, gridBagConstraints);

        jLabel5.setText("PPlus active overhang (E):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        wellImplant.add(jLabel5, gridBagConstraints);

        pPlusOverhang.setColumns(8);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 2);
        wellImplant.add(pPlusOverhang, gridBagConstraints);

        jLabel6.setText("PPlus spacing (F):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 4, 0);
        wellImplant.add(jLabel6, gridBagConstraints);

        pPlusSpacing.setColumns(8);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 4, 2);
        wellImplant.add(pPlusSpacing, gridBagConstraints);

        jLabel7.setText("NWell width (G):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 1, 0);
        wellImplant.add(jLabel7, gridBagConstraints);

        nWellWidth.setColumns(8);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 1, 2);
        wellImplant.add(nWellWidth, gridBagConstraints);

        jLabel8.setText("NWell active overhang (H):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        wellImplant.add(jLabel8, gridBagConstraints);

        nWellOverhang.setColumns(8);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 2);
        wellImplant.add(nWellOverhang, gridBagConstraints);

        jLabel9.setText("NWell spacing (I):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        wellImplant.add(jLabel9, gridBagConstraints);

        nWellSpacing.setColumns(8);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 2);
        wellImplant.add(nWellSpacing, gridBagConstraints);

        jLabel10.setText("All values are in nanometers");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 1, 0);
        wellImplant.add(jLabel10, gridBagConstraints);

        jLabel11.setText("Well / Implant Parameters");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
        wellImplant.add(jLabel11, gridBagConstraints);

        getContentPane().add(wellImplant, new java.awt.GridBagConstraints());

        pack();
    }// </editor-fold>//GEN-END:initComponents

	/** Closes the dialog */
	private void closeDialog(java.awt.event.WindowEvent evt)//GEN-FIRST:event_closeDialog
	{
		setVisible(false);
		dispose();
	}//GEN-LAST:event_closeDialog

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel image;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField nPlusOverhang;
    private javax.swing.JTextField nPlusSpacing;
    private javax.swing.JTextField nPlusWidth;
    private javax.swing.JTextField nWellOverhang;
    private javax.swing.JTextField nWellSpacing;
    private javax.swing.JTextField nWellWidth;
    private javax.swing.JTextField pPlusOverhang;
    private javax.swing.JTextField pPlusSpacing;
    private javax.swing.JTextField pPlusWidth;
    private javax.swing.JPanel wellImplant;
    // End of variables declaration//GEN-END:variables

}
