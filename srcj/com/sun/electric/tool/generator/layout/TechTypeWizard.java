/* -*- tab-width: 4 -*-
 *
 * Electric(tm) VLSI Design System
 *
 * File: TechTypeWizard.java
 *
 * Copyright (c) 2003 Sun Microsystems and Static Free Software
 *
 * Electric(tm) is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * Electric(tm) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Electric(tm); see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, Mass 02111-1307, USA.
 */
package com.sun.electric.tool.generator.layout;

import com.sun.electric.database.hierarchy.Cell;
import com.sun.electric.technology.ArcProto;
import com.sun.electric.technology.Technology;

import java.util.Iterator;

/**
 * The TechType class holds technology dependent information for the layout
 * generators. Technology is like those generated by technology Wizard.
 * Technology dependent information
 */
public class TechTypeWizard extends TechType {

    private final ArcProto pdiff, ndiff, ndiff18, pdiff18, ndiff25, pdiff25, ndiff33, pdiff33;


    public TechTypeWizard(Technology tech) {
        super(tech, findLayers(tech));

        pdiff = tech.findArcProto("P-Active");
        ndiff = tech.findArcProto("N-Active");
        ndiff18 = tech.findArcProto("thick-OD18-N-Active");
        pdiff18 = tech.findArcProto("thick-OD18-P-Active");
        ndiff25 = tech.findArcProto("thick-OD25-N-Active");
        pdiff25 = tech.findArcProto("thick-OD25-P-Active");
        ndiff33 = tech.findArcProto("thick-OD33-N-Active");
        pdiff33 = tech.findArcProto("thick-OD33-P-Active");
    }

    public int getNumMetals() {
        return getTechnology().getNumMetals();
    }

    public ArcProto pdiff() {return pdiff;}
    public ArcProto ndiff() {return ndiff;}
    public ArcProto ndiff18() {return ndiff18;}
    public ArcProto pdiff18() {return pdiff18;}
    public ArcProto ndiff25() {return ndiff25;}
    public ArcProto pdiff25() {return pdiff25;}
    public ArcProto ndiff33() {return ndiff33;}
    public ArcProto pdiff33() {return pdiff33;}

     /** round to avoid MOCMOS CIF resolution errors */
    public double roundToGrid(double x) {
        throw new UnsupportedOperationException();
    }

    public MosInst newNmosInst(double x, double y, double w, double l, Cell parent) {
        throw new UnsupportedOperationException();
    }

    public MosInst newPmosInst(double x, double y, double w, double l, Cell parent) {
        throw new UnsupportedOperationException();
    }

    public String name() {
        return getTechnology().getTechName();
    }

    public double reservedToLambda(int layer, double nbTracks) {
        throw new UnsupportedOperationException();
    }

    private static String[] findLayers(Technology tech) {
        String[] arcNames = new String[tech.getNumMetals() + 1];
        for (Iterator<ArcProto> it = tech.getArcs(); it.hasNext(); ) {
            ArcProto ap = it.next();
            ArcProto.Function fun = ap.getFunction();
            if (fun == ArcProto.Function.POLY1) {
                if (arcNames[0] != null) {
                    throw new IllegalArgumentException("Duplicate Poly arc");
                }
                arcNames[0] = ap.getName();
            } else if (fun.isMetal()) {
                int level = fun.getLevel();
                if (level <= 0 || level > tech.getNumMetals())
                    continue;
                if (level == 0 || arcNames[level] != null) {
                    throw new IllegalArgumentException("Duplicate Metal-"+(level+1)+" arc");
                }
                arcNames[level] = ap.getName();
            }
        }

        for (String n: arcNames) {
            System.out.println(n);
        }
        return arcNames;
    }

    private static ArcProto findArc(Technology tech, ArcProto.Function fun) {
        ArcProto found = null;
        for (Iterator<ArcProto> it = tech.getArcs(); it.hasNext(); ) {
            ArcProto ap = it.next();
            if (ap.getFunction() != fun) continue;
            if (found != null) {
                throw new IllegalArgumentException("Duplicate arc "+fun);
            } else {
                found = ap;
            }
        }
        return found;
    }
}
