        Xml Technology file in Electric Version 8-06

Layout technologies in Electric are described by Xml technology files.
These files can be edited graphically by the technology editor.
Some users may prefer to edit Xml technology files as text.
Here is a descriptor of technology file format for these users.

Electric version 8-06 has Xml technology files designed in
unparameterized style. Technology distances are specified as double numbers in lambda unit.
Future versions of Electric may implement symbolic style of Xml technology files.

Currently technology file contains two kinds of information:
1) Physical and electrical details of foundry process, which are independent of Electric CAD;
   Most of these details are attached to description of _layers_;
   Others are in design rules, simulation information;
2) Electric approach to design:
   Description of primitive nodes and arcs;
   Connectivity rules;
   Display and print styles;
   Description of technology menu;

Primitive nodes and arcs can be considered as designed macros.
Node description consists of a few two-dimentional shapes.
Arcs description consists of a few one-dimentional intervals, which are stretched in other dimentsion.
Technology file describes primitive nodes and arcs of a standard size.
Usually the standard size is determined by DRC rules.
However instances of nodes and arcs in a Library can have sizes larger than standard.
So technology files contains information how to stretch primitive nodes and arcs to larger sizes.

A primitive nodes or arc can consists of many shapes in different technology layers.
Each shape of primitive node is called 'NodeLayer'.
Each interval of primitive arc is called 'ArcLayer'.

The MBB box of all NodeLayers of a primitive node is called its 'FullRectangle'.
Description of primitive node can also difine 'FullRectangle' explicitely.
The largest of all ArcLayers of a primitive arc is calles its 'FullWidth'.

Primitive nodes and arcs have also notion of 'BaseRectangle' and 'BaseWidth'.
They may relate to the shape of the most important layer in this node/arc .
The 'BaseRectangle' of primitive node is described explicitely.
The 'BaseWidth' of primitive arc is the width of the first 'ArcLayer' in arc description.
The 'BaseRectangle' and 'BaseWidth' are highlighed in the EditWindow and they appear
in GetInfoNode/GetInfoArc dialogs.

Instance of nodes and arc in a library can have sizes larger than standard.
Electric writes to library file a size information together with each instance.
Electric since 8-05 release (or more precisely since 8-05o developement version)
writes to library file the extend of node/arc instance over node/arc of standard size
described in  technology file. When you switch a design library from one technology
to another compatable technology, the standard size node/arc in old technology is
converted to the standard size node/arc in the new technology. The node/arc which extends
by 1 lambda the standard node/arc in old technology is converted to node/arc which
extends by 1 lambda the standard node/arc in new technology.
The older Electric release wrote sizes of node/arc instances in another way.
Jelib format before 8-05 release (before 8-05g developement version) and Elib format
wrote sizes of 'FullRectangle' and 'FullWidth'.
Jelib format between 8-05g and 8-05n development versions wrote sizes of 'BaseRectangle' and
'BaseWidth'.
The 'Full' and 'Base' sizes can be redefinded in future versions of technology file. To be
able to read older Jelib formats correctly after redefinition of 'Full' and 'Base',
Technology file can containe explicite sizes of standard nodes/arcs in older library files.

All sizes in technology files are in lambda units. There is a scale declaration which
relates a lambda unit to nanometers.

======================== Version8-06 =================================================

Here is a description of Xml technology file in Electric relreases 8-05 and 8-06.

<technology name="mocmos" class="com.sun.electric.technology.technologies.MoCMOS"
     xmlns="http://electric.sun.com/Technology"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://electric.sun.com/Technology ../../technology/Technology.xsd">

<technology> is the main element of Xml technology file. It has a lot of Xml-specific attrubets.
Attribute "name" contains a name how this technology will be called inside Electric.
Optional "class" attribute contains a name of Java class which is subclass of
"com.sun.electric.technology.Technology" class. It can be used to describe things which
are not described by Xml technology class yet. The interface with this class is not specified
and can be changed. If you need non-standard technology feature, the better way is to contact
Electric developers about this.

  <technology name="mocmos" class="com.sun.electric.technology.technologies.MoCMOS"
     xmlns="http://electric.sun.com/Technology"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://electric.sun.com/Technology ../../technology/Technology.xsd">

<technology> element contains some subelements:
  <shortName> - optional more description of technology more verbose than was in <technology name="?"> attribute
  <description> - yet more verbose description
  <version> - list of Electric versions when library format has changes on node/arc sizes
  <numMetals> - number of metals in the technology
  <scale> - scale information
  <defaultFoundry> - name of default foundry, see definitions of foundries below
  <minResistance> - information for parasitics extractor
  <minCapacitance> - information for parasitics extractor
  <transparentLayer> - a list of transparent Colors in the default display style
  <layer> - a list of layer description
  <arcProto> - a list of primitive arc description 
  <primitiveNode> - a list of primitive node description
  <spiceHeader> - default spice models
  <menuPalette> - optional description of default technology menu palette
  <Foundry> - a list of Foundry description. Each has default DRC rules and default GDS mapping


<version> describes Electric versions when Jelib changed the meaning of sizes.
    Attribute "tech" contains an identifier of this version used in <diskOffset> subelements
    of <arcProto> and <primitiveNode>. Attribute "electric" is a corresponding Electric version.
    These elements are usually fixed in all technology files:

    <version tech="1" electric="8.05g"/>
    <version tech="2" electric="8.05o"/>

<numMetals> the syntax allows to describe a possible range for number of metalls in the technology
    There is no good support for Xml technology file with variable number of metals.
    Element should contains the same value for all three attributes

    <numMetals min="6" max="6" default="6"/>

<scale> defines how many nanometers in the lambda unit in the technology.
    Attribute "relevant" should be true for layout technologies.

    <scale value="200.0" relevant="true"/>

<defaultFoundry> is a name of default foundry for this technology. The name should be one of the
    name of one of the <Foundry> element.

    <defaultFoundry value="MOSIS"/>

<minResistance> and <minCapacitance> elements contains information for parasitics extractor.

    <minResistance value="4.0"/>
    <minCapacitance value="0.1"/>

<transparentLayer> the list of tranparent layers defines RGB colors of transparent layers in default display style

    <transparentLayer transparent="1">
        <r>96</r>
        <g>209</g>
        <b>255</b>
    </transparentLayer>

<layer> element is a definition of a layer in technology process.
    "name" attribute is the name of the layer. This name is not referenced in Library files.
    It will be referenced in description of primtive nodes/arcs and in DRC rules.
    Each layer has a layer function "fun" from the list:
       UNKNOWN
       METAL1 METAL2 METAL3 METAL4 METAL5 METAL6
       METAL7 METAL8 METAL9 METAL10 METAL11 METAL12
       POLY1 POLY2 POLY3
       GATE
       DIFF DIFFP DIFFN
       IMPLANT IMPLANTP IMPLANTN
       CONTACT1 CONTACT2 CONTACT3 CONTACT4 CONTACT5 CONTACT6
       CONTACT7 CONTACT8 CONTACT9 CONTACT10 CONTACT11 CONTACT12
       PLUG OVERGLASS
       RESISTOR CAP
       TRANSISTOR
       EMITTER BASE COLLECTOR SUBSTRATE
       WELL WELLP WELLN
       GUARD SOLATION
       BUS ART
       CONTROL
       TILENOT
     Some functions has also subfunctions specified by optional attribute extraFun:
       nonelectrical
       connects-metal connects-poly connects-diff
       heavy light depletion_heavy depletion_light enhancement_heavy enhancement_light
       vt
       thick
       native

    <layer name="Poly-Cut" fun="CONTACT1" extraFun="connects-poly">

<layer> element contains subelements:
    <transparentColor> - display/printer style
    <opaqueColor> - display/printer style
    <patternedOnDisplay> - display/printer style
    <patternedOnPrinter> - display/printer style
    <pattern> - display/printer style
    <outlined> - display/printer style
    <opacity> - display/printer style
    <foreground> - display/printer style
    <display3D> - display/printer style and parasitic extractor
    <cifLayer> - CIF layer name
    <skillLayer> - Skill layer name
    <parasitic> - parasitic extractor subelements
    <pureLayerNode> -  description of pure layer node for this layer

<display3D> element has attributes
    "thick" - 3D thickness of the layer in lambda units
    "height" - 3D height of the bottom of the layer in lambda units
    "mode" - 3D display style
    "factor" - 3D display style

        <display3D thick="0.75" height="15.75" mode="NONE" factor="0.2"/>

<pureLayerNode> Pure-Layer Node is a node which contains a single NodeLayer
     This node is used to represent arbitrary polygon of this Layer.
     Import from external formats (like GDS).
     The standard pure-layer node has zero FullRectangle and BaseRectangle.
     So library file contains exact geometry information for instances of pure layer node.
     All the shape of pure-layer node is considered a port shape of the single port of the node.

<pureLayerNode> element has optional subelements
    <oldName> if the pure-layer node has another name in older versions of the technology
    <lambda> the default width of this pure-layer-node when it is placed manually
    <portArc> the list of arc names which can connect to this pure-layer node

        <pureLayerNode name="Transistor-Poly-Node" port="trans-poly-1">
            <lambda>2.0</lambda>
            <portArc>Polysilicon-1</portArc>
        </pureLayerNode>

<arcProto> describes primitive arc in the technology
    The "name" attribute is the name of the arc proto.
    The instances of the primtive arc in Electric libraries reference this name.
    The "fun" attribute describes the arc function:
        UNKNOWN
        METAL1 METAL2 METAL3 METAL4 METAL5 METAL6
        METAL7 METAL8 METAL9 METAL10 METAL11 METAL12
        POLY1 POLY2 POLY3
        DIFF DIFFP DIFFN DIFFS DIFFW
        BUS
        UNROUTED NONELEC

    <arcProto name="P-Active" fun="DIFFP">
        <wipable/>
        <extended>true</extended>
        <fixedAngle>true</fixedAngle>
        <angleIncrement>90</angleIncrement>
        <antennaRatio>200.0</antennaRatio>
        <diskOffset untilVersion="1" width="7.5"/>
        <diskOffset untilVersion="2" width="1.5"/>
        <arcLayer layer="P-Active" style="FILLED">
            <lambda>1.5</lambda>
        </arcLayer>
        <arcLayer layer="N-Well" style="FILLED">
            <lambda>7.5</lambda>
        </arcLayer>
        <arcLayer layer="P-Select" style="FILLED">
            <lambda>3.5</lambda>
        </arcLayer>
    </arcProto>


<arcProto> element has subelements:
    <oldName> - optional name of this primitive arc in previous versions of the technology
    <wipable> - optional flag to mark that the arc wipes its pins. This flag is usually present in layout technologies
    <curvable> - flag to described round arcs. It is not supported in the current implementation
    <special> - flag related to menu palette
    <notUsed> - flag to forbid use of this primtive arc in libraries
    <skipSizeInPalette> - one more flag related to menu palette
    <extended> - factory default value of flag which controls shape at the ends of the arc
    <fixedAngle> - factory default value flag which keeps the angle of the arc unchanged during editing
    <antennRatio> - value for the ERC tool
    <diskOffset> - describes size of the standard arc in older versions of Electric libraries
    <defaultWidth> - factory default value of arc width. This element is not used now and should be omitted.
    <arcLayer> - a list of ArcLayers

    <arcProto name="P-Active" fun="DIFFP">

<diskOffset> element tells how sizes were written in older library files
    Attribute "untilVersion" references attribute "tech" of <version> element above.
    This disk offset is applied to Jelib libraries with Electric version prior to "electric" attribute
    of that <version> element. Attribute <width> is actually half of the value written to Jelib file.
    So described above "P-Active" arc of standard size will be written: 
      with Jelib width "15.0" proir to Electric version "8.05g";
      with Jelib width "3.0" prior to Electric version "8.05o";
      with Jelib width "0" in Electric versions since "8.05o" till now.

    More formally:
    Let "a.extend" is the internal value associated with the arc instance in the Electric database.
    The value written to library prior to "diskOffset.untilVersion" was "2*(a.extend + diskOffset.width)".
    The <diskOffset> element is necessary only to legacy technologies.

        <diskOffset untilVersion="1" width="7.5"/>

<arcLayer> element describes ArcLayer in the primitive arc
    The attribute "layer" references the layer of the ArcLayer
    The attribute "style" is either "FILLED" or "CLOSED". Layout arcs should be "FILLED".
    The <lambda> subelement describes extend (half width) of the ArcLayer from the central
    line of the arc.
    More formally:
    Let "a.extend" is the internal value associated with the arc instance in the Electric database.
    The width of the "P-Select" <arcLayer> below is "2*(a.extend + 3.5)"

        <arcLayer layer="P-Select" style="FILLED">
            <lambda>3.5</lambda>
        </arcLayer>

The FullWidth of the arc instance is the width of the widest ArcLayer.
It is "2*(a.extend + 7.5)" in the above "P-Active" arc.
The BaseWidth of the arc instance is the width of the first ArcLayer in the list.
It is "2*(a.extennd + 1.5)" in the above "P-Active" arc.

<primitiveNode> element describes primitive node in the technology
    The "name" attribute is the name of the node proto.
    The instances of the primtive node in Electric libraries reference this name.
    The "fun" attribute describes the node function:
        UNKNOWN
        PIN
        CONTACT
        NODE
        CONNECT
        TRANMOS TRADMOS TRAPMOS
        TRANPN TRAPNP
        TRANJFET TRAPJFET
        TRADMES TRAEMES
        TRANSREF
        TRANS
        TRA4NMOS TRA4DMOS TRA4PMOS
        TRA4NPN TRA4PNP
        TRA4NJFET TRA4PJFET
        TRA4DMES TRA4EMES
        TRANS4
        RESIST PRESIST WRESIST ESDDEVICE
        CAPAC ECAPAC
        DIODE DIODEZ
        INDUCT
        METER
        BASE EMIT COLLECT
        BUFFER GATEAND GATEOR GATEXOR
        FLIPFLOPRSMS FLIPFLOPRSP FLIPFLOPRSN
        FLIPFLOPJKMS FLIPFLOPJKP FLIPFLOPJKN
        FLIPFLOPDMS FLIPFLOPDP FLIPFLOPDN
        FLIPFLOPTMS FLIPFLOPTP FLIPFLOPTN
        MUX
        CONPOWER CONGROUND
        SOURCE
        SUBSTRATE WELL
        ART
        ARRAY
        ALIGN
        CCVS CCCS VCVS VCCS
        TLINE

    <primitiveNode name="Metal-1-Metal-2-Con" fun="CONTACT">
        <diskOffset untilVersion="1" x="2.5" y="2.5"/>
        <diskOffset untilVersion="2" x="2.0" y="2.0"/>
        <sizeOffset lx="0.5" hx="0.5" ly="0.5" hy="0.5"/>
        <nodeLayer layer="Metal-1" style="FILLED">
            <box>
                <lambdaBox klx="-2.0" khx="2.0" kly="-2.0" khy="2.0"/>
            </box>
        </nodeLayer>
        <nodeLayer layer="Metal-2" style="FILLED">
            <box>
                <lambdaBox klx="-2.0" khx="2.0" kly="-2.0" khy="2.0"/>
            </box>
        </nodeLayer>
        <nodeLayer layer="Via1" style="FILLED">
            <multicutbox sizex="2.0" sizey="2.0" sep1d="3.0" sep2d="3.0">
                <lambdaBox klx="0.0" khx="0.0" kly="0.0" khy="0.0"/>
            </multicutbox>
        </nodeLayer>
        <primitivePort name="metal-1-metal-2">
            <portAngle primary="0" range="180"/>
            <portTopology>0</portTopology>
            <box>
                <lambdaBox klx="-1.0" khx="1.0" kly="-1.0" khy="1.0"/>
            </box>
            <portArc>Metal-1</portArc>
            <portArc>Metal-2</portArc>
        </primitivePort>
        <minSizeRule width="5.0" height="5.0" rule="8.3, 9.3"/>
    </primitiveNode>

<primitiveNode> element has subelements
    <oldName> - optional name of this primitive node in previous versions of the technology
    <shrinkArcs> - flag to shrink arcs connected to the node. This flag should be "on" only on PIN nodes.
    <square> - flag to restrict the node to square shape. It is used in round layout technologies.
    <canBeZeroSize> - flag which is not used in layout technologies
    <wipes> - flag which is not used in layout technologies
    <lockable> - flag which is used in arrayed technologies (like sea of gates)
    <edgeSelect> - flag which is not used in layout technologies
    <skipSizeInPalette> - flag related to menu palette
    <notUsed> - flag to forbid use of this primtive node in libraries
    <lowVt> - flag to mark a low vt transistor
    <highVt> - flag to mark a high vt transistor
    <nativeBit> - flag to mark a native transistor
    <od18> - flag to mark an od18 transistor
    <od25> - flag to mark an od25 transistor
    <od33> - flag to mark an od33 transistor
    <diskOffset> - describes size of the standard node in older versions of Electric libraries
    <defaultWidth> - factory default value of node extendX.
    <defaultHeight> - factory default value of node extendY.
    <sizeOffset> - defines BaseRectangle of the node
    <nodeLayer> - a list of NodeLayers
    <primitivePort> - a list of prititive ports on the node
    <serpTrans> - describes this node as serpentine transistor
    <polygonal> - marks that this node can be arbitrary polygon. Usually is not used in layout technologies
    <minSizeRule> - overrides FullRectangle of the node and supplies the name of minimal size rule
    <spiceTemplate> - optional spice template of this node

<diskOffset> element tells how sizes were written in older library files
    Attribute "untilVersion" references attribute "tech" of <version> element above.
    This disk offset is applied to Jelib libraries with Electric version prior to "electric" attribute
    of that <version> element. Attributes <x> and <y> are actually half of the values written to Jelib file.
    So described above "Metal-1-Metal-2-Con" node of standard size will be written: 
      with Jelib width and height "5.0" proir to Electric version "8.05g";
      with Jelib width and height "4.0" prior to Electric version "8.05o";
      with Jelib width and height "0" in Electric versions since "8.05o" till now.

    More formally:
    Let "n.extendX" and "n.extendY" are the internal values associated with the node instance in the Electric database.
    The values written to library prior to "diskOffset.untilVersion" were
       "2*(n.extendX + diskOffset.x)" and "2*(n.extendY + diskOffset.y)".
    The <diskOffset> element is necessary only to legacy technologies.

        <diskOffset untilVersion="1" x="2.5" y="2.5"/>

<defaultWidth> - factory default value of node extendX.
<defaultHeight> - factory default value of node extendY.
       The subelement <lambda> contains value of extendX/extendY in lambda units.
       Usually these elements are omitted because the default values of extendX and extendY are 0.
       So, the factory defauls of extendX and extendY are defaultWidth.lambda and defaultHEight.lambda
       The factory defaults of BaseWidth and BaseHeight are
             BaseRectangle.width + 2*defaultWidth.lambda and BaseRectangle.height + 2*defaultHeight.lambda .
       The factory defaults of FullWidth and FullHEight are
             FullRectangle.width + 2*defaultWidth.lambda and FullRectangle.height + 2*defaultHeight.lambda .

<nodeLayer> element describes NodeLayer in the primitive node
    The attribute "layer" references the layer of the NodeLayer
    The attribute "style" is either "FILLED", "CLOSED" or "CROSSED".
    Layout nodes should be "FILLED", "CROSSED" is used only with pins.
    "portNum" attribute relates a primitive port to this NodeLayer. It is 0-based index
       of <primitivePort> subelement of <primitiveNodeElement>. Negative value means that this NodeLayer
       is not related to any port.
       If this attribute is omitted the first primitive port in the list is chosen. 
    "electrical" attribute marks this NodeLayer be visible only in either electrical or non-electrical node layers.
       For example electrical NodeLayers in transistor are gate-poly and two poly-ends.
       Non-electrical NodeLayer in transistor is long strype of poly.
       If this attribute is omitted, the NodeLayers appears in both electrical and non-electrical lists.
       This feature may be removed in future Electric versions.
       So the recommended style is to define NodeLayers of transistor in electrical style and
       to omit "electrical" attribute in NodeLayers.

        <nodeLayer layer="Metal-2" style="FILLED">

<nodeLayer> contains definition of its shape in one of the following choices
    <box> - a box shape
    <points> - a polygon shape
    <multicutbox> - a rectangle region where centers of contact-cuts are placed in uniformly spacing array 
    <serpbox> - a serpentine box used in serpentine transistors

<box> a box has attributes "klx", "khx", "kly", "khy" and a subelement <lambdaBox>.
     The attributes can be omitted. Their default valus are "klx=-1", "khx=1" "kly=-1" "khy=1".

<lambdaBox> subelement also has attributes "klx", "khx", "kly", "khy".

    Attributes of a <lambdaBox> describes shape of the NodeLayer on standard size node.
    Attributes of a <box> describes how this shape grows when node instance has size larger than standard.

    More formally:
    Let "n.extendX" and "n.extendY" are the internal values associated with the node instance in the Electric database.
    The shape of the <nodeLayer> with <box> shape is a rectangle with endPoints:
       [x = lambdaBox.klx + n.extendX*box.klx, y = lambdaBox.kly + n.extendY*box.kly]
    and 
       [x = lambdaBox.khx + n.extendX*box.khx, y = lambdaBox.khy + n.extendY*box.khy]
    
    For example, the shape of "Metal-2" NodeLayer below is a rectangle with endPoints:
       [x = -2 - n.extendX, y = -2 - n.extendY] and [x = 2 + n.extendX, y = 2 + n.extendY]

        <nodeLayer layer="Metal-2" style="FILLED">
            <box>
                <lambdaBox klx="-2.0" khx="2.0" kly="-2.0" khy="2.0"/>
            </box>
        </nodeLayer>

<points> subelement is followed by a few <techPoint> elements which describe vertives of a polygon.

<techPoint> element has attribute "xm", "xa", "ym", "ya".
    It defines a point [x = techPoint.xa + 2*n.extendX*techPoint.xm, y = techPoint.ya + 2*n.extendY*techPoint.ym]
    Notice that meaning of techPoint.xm and techPoint.ym is inconsistent with meanding of box.klx, box.khx, box.kly, box.khy .

<multicutbox> is similar to <box>, but it has additional attributes
    "sizex" and "sizey" describe the size of contact-cut
    "sep1d" describes separation between contact-cuts in one-dimensional array
    "sep2d" describes separation between contact-cuts in two-dimentional array
    The centers of contact-cut are constrained to be in the box defined by <lambdaBox> subelement
    and multicutbox's attributes "klx", "khx", "kly", "khy".

    The NodeLayer of "Via1" layer will generate in standard node a single contact cut of size 2x2 with
    the center in origin.
    When the n.extendX >= (2.0 + 3.0)/2 = 2.5 or n.extendY >= 2.5 then the NodeLayer will generate
    a few contact-cuts.

        <nodeLayer layer="Via1" style="FILLED">
            <multicutbox sizex="2.0" sizey="2.0" sep1d="3.0" sep2d="3.0">
                <lambdaBox klx="0.0" khx="0.0" kly="0.0" khy="0.0"/>
            </multicutbox>
        </nodeLayer>

<serpbox> is similar to <box>, but it has additional attributes
    "lWidth"
    "rWidth"
    "tExtent"
    "bExtent"

<primitivePort> element describes primitive port on the primitive node
    Its "name" attribute describes the port name.
    To make library conversion from one technology to another it should be good
    to unify port names in some manner.
    Port names of single-port nodes are not very important because library reader
    can unambiguously connect arcs to the renamed port.
    However, port names of transistor could have compatable names like
    "poly-top", "poly-bottom", "diff-left", "diff-right". 

        <primitivePort name="metal-1-metal-2">
            <portAngle primary="0" range="180"/>
            <portTopology>0</portTopology>
            <box>
                <lambdaBox klx="-1.0" khx="1.0" kly="-1.0" khy="1.0"/>
            </box>
            <portArc>Metal-1</portArc>
            <portArc>Metal-2</portArc>
        </primitivePort>

<primtivePort> has subelements
    <portAngle> - can restrict direction of arcs which can connect to this port
    <portTopology> - tells that ports are connected inside this primitive node
    <box> - a rectangle which constraints the position of end point of connected arc
    <portArc> - a list of primitive arcs from this technology which can connect to this port

<portTopology> is a small integer that is unique among PrimitivePorts on the PrimitiveNode.
	 When two PrimitivePorts have the same topology number, it indicates that these ports are connected.

<serpTrans> element marks this node as serpentine transistor. It supplies 6 special values


<minSizeRule> element overrides FullRectangle of the node and supplies the name of minimal size rule
    The attributes "width", "height" describe size of the FullRectangle.
    The attribute "rule" is the name of minimal size rule. 
    By default FullRectangle is calculated as MBB of all points found in NodeLayers of standard primitive node.
    For "Metal-1-Metal-2-Con" node above the FullRectangle is calculated as box with endpoints
    [x = -2.0, y = -2.0] and [x = 2.0, y = 2.0].
    The FullBox of node instance with n.extendX and n.extendY is considered as
    [x = FullRectangle.minX - n.extendX, y = FullRectangle.minY - n.extendY]
    and
    [x = FullRectangle.maxX + n.extendX, y = FullRectangle.maxY + n.extendY]
    This may be not accurate if shapes which made MBB of standard-size node grows slower than
    other shapes when extends are increased.

    The <minSizeRule> element defines FullRectangle manually as a rectangle with center in the origin.
    The FullRectangle in the precence of <minSizeRule> is
    [x = -0.5*minSizeRule.width, y = -0.5*minSizeRule.height]
    and
    [x = +0.5*minSizeRule.width, y = +0.5*minSizeRule.height]

    This element defines FullRectangle of "Metal-1-Metal-2-Con" as
    [x = -2.5, y = -2.5] and [x = 2.5, y = 2.5]

        <minSizeRule width="5.0" height="5.0" rule="8.3, 9.3"/>

<sizeOffset> element defines BaseRectangle by FullRectangle
    The attribute "lx", "hx", "ly", "hy" are offsets from FullRectangle inside to BaseRectangle
    The BaseRectangle is
    [x = FullRectangle.minX + sizeOffset.lx, y = FullRectangle.minY + sizeOffset.ly]
    and
    [x = FullRectangle.maxX - sizeOffset.hx, y = FullRectangle.maxY - sizeOffset.hy]
    If <sizeOffset> element was omitted then BaseRectangle is the same as FullRectangle.


======================== Version8-07 =================================================

This text is a draft suggests definition of the Technology Xml syntax for future Electric
release version8-07 .

The syntax is being protyped by
com/sun/electric/technology/xml/Technology807.xsd - syntax of Xml language
com/sun/electric/technology/xml/Xml807.xsd - reader/writer of Xml language
com/sun/electric/technology/technologies/mocmos807.xml - an example in this syntax
but currently they are not at final syntax.

Technology description will be in symbolic form, where distances are expressed
by Xml construct Distance.
Distance is a linear expression which is a sum of terms.
There is an arbitrary number of variable terms and an optional constant term.

<xsd:group name="Distance">
    <xsd:sequence>
        <xsd:element name="rule" minOccurs="0" maxOccurs="unbounded">
            <xsd:complexType>
                <xsd:attribute name="ruleName" type="tns:RuleName" use="required"/>
                <xsd:attribute name="layer" type="tns:LayerName">
                <xsd:attribute name="layer2" type="tns:LayerName">
                <xsd:attribute name="k" type="xsd:double"/>
            </xsd:complexType>
        </xsd:element>
        <xsd:element name="lambda" type="xsd:double" minOccurs="0"></xsd:element>
    </xsd:sequence>
</xsd:group>

The constanct term is a double in lambda units.
The variable term is a name of variable and constant double multiplier "k".
Name of variable is either simple name "ruleName" or
"ruleName" indexed by one or two layers.

The examples of terms are
<rule ruleName="width" layer="P-Active" k="0.5"/>
<rule ruleName="overhang" layer="P-Select" layer2="P-Active">
<lambda>3.0</lambda>


A construct to define values of rule indexed by layer is 
<layerRule>. It has ruleName and a map from layers to Distance expressions.
For example:
<layerRule ruleName="width">
  <layer name="Metal-1>  <rule ruleName="7.1"/></layer>
  <layer name="Metal-2>  <rule ruleName="9.1"/></layer>
</layerRule>

There will be a section in <foundry> which defines foundry specific rules like this

<Foundry name="SUBM">
  <ruleDef ruleName="7.1" value="3.0"/>
</Foundry>

---------------------------
Some layer rules are used implicitly. They are:

<rule name="width" layer="layerName"/>   used as default width of pure layer nodes
<rule name="thick3d" layer="layerName"/>   used in Display3D and (possibly) in parasitics extraction
<rule name="height3d" layer="layerName"/>   used in Display3D and (possibly) in parasitics extraction
